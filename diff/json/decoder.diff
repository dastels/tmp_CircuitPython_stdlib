--- <CPython-3.4.9>/json/decoder.py
+++ lib/json/decoder.py
@@ -8,9 +8,7 @@
 except ImportError:
     c_scanstring = None
 
-__all__ = ['JSONDecoder']
-
-FLAGS = re.VERBOSE | re.MULTILINE | re.DOTALL
+
 
 NaN = float('nan')
 PosInf = float('inf')
@@ -52,7 +50,28 @@
 }
 
 
-STRINGCHUNK = re.compile(r'(.*?)(["\\\x00-\x1f])', FLAGS)
+class Match:                                                                    ### ure.Match doesn't have .end() nor .groups()
+    def __init__(self, end, groups):                                            ###
+        self._end = end                                                         ###
+        self._groups = groups                                                   ###
+    def end(self):                                                              ###
+        return self._end                                                        ###
+    def groups(self):                                                           ###
+        return self._groups                                                     ###
+class STRINGCHUNK:                                                              ###
+    def match(s, pos):                                                          ###
+        slash_idx = s.find('\\', pos)                                           ### ure.match doesn't support the pos argument
+        quote_idx = s.find('"', pos)                                            ###
+        if slash_idx < 0 and quote_idx < 0:                                     ###
+            return None                                                         ###
+        if slash_idx < 0 or quote_idx < 0:                                      ###
+            terminator_idx = max(slash_idx, quote_idx)                          ###
+        else:                                                                   ###
+            terminator_idx = min(slash_idx, quote_idx)                          ###
+        groups = s[pos:terminator_idx], s[terminator_idx]                       ###
+        end = terminator_idx + 1                                                ###
+        return Match(end, groups)                                               ###
+                                                                                ###
 BACKSLASH = {
     '"': '"', '\\': '\\', '/': '/',
     'b': '\b', 'f': '\f', 'n': '\n', 'r': '\r', 't': '\t',
@@ -70,6 +89,7 @@
 
 def py_scanstring(s, end, strict=True,
         _b=BACKSLASH, _m=STRINGCHUNK.match):
+###        _b=BACKSLASH, _m=None):                                                 ###
     """Scan the string s for a JSON string. End is the index of the
     character in s after the quote that started the JSON string.
     Unescapes all valid JSON string escape sequences and raises ValueError
@@ -132,7 +152,18 @@
 # Use speedup if available
 scanstring = c_scanstring or py_scanstring
 
-WHITESPACE = re.compile(r'[ \t\n\r]*', FLAGS)
+class WHITESPACE:                                                               ###
+    def match(s, pos):                                                          ###
+        if pos > len(s):                                                        ###
+            return Match(len(s), None)                                          ###
+        i = pos                                                                 ###
+        try:                                                                    ###
+            while s[i] in ' \t\n\r':                                            ###
+                i += 1                                                          ###
+        except IndexError:                                                      ###
+            pass                                                                ###
+        return Match(i, None)                                                   ###
+                                                                                ### .groups() is not used
 WHITESPACE_STR = ' \t\n\r'
 
 
@@ -360,3 +391,4 @@
         except StopIteration as err:
             raise ValueError(errmsg("Expecting value", s, err.value)) from None
         return obj, end
+