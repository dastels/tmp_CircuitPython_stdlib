--- <CPython-3.4.9>/timeit.py
+++ lib/timeit.py
@@ -54,29 +54,12 @@
 import time
 import itertools
 
-__all__ = ["Timer", "timeit", "repeat", "default_timer"]
 
 dummy_src_name = "<timeit-src>"
 default_number = 1000000
 default_repeat = 3
-default_timer = time.perf_counter
+default_timer = time.monotonic                                                  ###
 
-# Don't change the indentation of the template; the reindent() calls
-# in Timer.__init__() depend on setup being indented 4 spaces and stmt
-# being indented 8 spaces.
-template = """
-def inner(_it, _timer{init}):
-    {setup}
-    _t0 = _timer()
-    for _i in _it:
-        {stmt}
-    _t1 = _timer()
-    return _t1 - _t0
-"""
-
-def reindent(src, indent):
-    """Helper to reindent a multi-line statement."""
-    return src.replace("\n", "\n" + " "*indent)
 
 def _template_func(setup, func):
     """Create a timer function. Used if the "statement" is a callable."""
@@ -110,26 +93,7 @@
         self.timer = timer
         ns = {}
         if isinstance(stmt, str):
-            # Check that the code can be compiled outside a function
-            if isinstance(setup, str):
-                compile(setup, dummy_src_name, "exec")
-                compile(setup + '\n' + stmt, dummy_src_name, "exec")
-            else:
-                compile(stmt, dummy_src_name, "exec")
-            stmt = reindent(stmt, 8)
-            if isinstance(setup, str):
-                setup = reindent(setup, 4)
-                src = template.format(stmt=stmt, setup=setup, init='')
-            elif callable(setup):
-                src = template.format(stmt=stmt, setup='_setup()',
-                                      init=', _setup=_setup')
-                ns['_setup'] = setup
-            else:
-                raise ValueError("setup is neither a string nor callable")
-            self.src = src # Save for traceback display
-            code = compile(src, dummy_src_name, "exec")
-            exec(code, globals(), ns)
-            self.inner = ns["inner"]
+            raise ValueError("stmt as string is currently not supported")       ###
         elif callable(stmt):
             self.src = None
             if isinstance(setup, str):
@@ -159,14 +123,7 @@
         The optional file argument directs where the traceback is
         sent; it defaults to sys.stderr.
         """
-        import linecache, traceback
-        if self.src is not None:
-            linecache.cache[dummy_src_name] = (len(self.src),
-                                               None,
-                                               self.src.split("\n"),
-                                               dummy_src_name)
-        # else the source is already stored somewhere else
-
+        import traceback                                                        ###
         traceback.print_exc(file=file)
 
     def timeit(self, number=default_number):
@@ -225,106 +182,4 @@
     """Convenience function to create Timer object and call repeat method."""
     return Timer(stmt, setup, timer).repeat(repeat, number)
 
-def main(args=None, *, _wrap_timer=None):
-    """Main program, used when run as a script.
-
-    The optional 'args' argument specifies the command line to be parsed,
-    defaulting to sys.argv[1:].
-
-    The return value is an exit code to be passed to sys.exit(); it
-    may be None to indicate success.
-
-    When an exception happens during timing, a traceback is printed to
-    stderr and the return value is 1.  Exceptions at other times
-    (including the template compilation) are not caught.
-
-    '_wrap_timer' is an internal interface used for unit testing.  If it
-    is not None, it must be a callable that accepts a timer function
-    and returns another timer function (used for unit testing).
-    """
-    if args is None:
-        args = sys.argv[1:]
-    import getopt
-    try:
-        opts, args = getopt.getopt(args, "n:s:r:tcpvh",
-                                   ["number=", "setup=", "repeat=",
-                                    "time", "clock", "process",
-                                    "verbose", "help"])
-    except getopt.error as err:
-        print(err)
-        print("use -h/--help for command line help")
-        return 2
-    timer = default_timer
-    stmt = "\n".join(args) or "pass"
-    number = 0 # auto-determine
-    setup = []
-    repeat = default_repeat
-    verbose = 0
-    precision = 3
-    for o, a in opts:
-        if o in ("-n", "--number"):
-            number = int(a)
-        if o in ("-s", "--setup"):
-            setup.append(a)
-        if o in ("-r", "--repeat"):
-            repeat = int(a)
-            if repeat <= 0:
-                repeat = 1
-        if o in ("-t", "--time"):
-            timer = time.time
-        if o in ("-c", "--clock"):
-            timer = time.clock
-        if o in ("-p", "--process"):
-            timer = time.process_time
-        if o in ("-v", "--verbose"):
-            if verbose:
-                precision += 1
-            verbose += 1
-        if o in ("-h", "--help"):
-            print(__doc__, end=' ')
-            return 0
-    setup = "\n".join(setup) or "pass"
-    # Include the current directory, so that local imports work (sys.path
-    # contains the directory of this script, rather than the current
-    # directory)
-    import os
-    sys.path.insert(0, os.curdir)
-    if _wrap_timer is not None:
-        timer = _wrap_timer(timer)
-    t = Timer(stmt, setup, timer)
-    if number == 0:
-        # determine number so that 0.2 <= total time < 2.0
-        for i in range(1, 10):
-            number = 10**i
-            try:
-                x = t.timeit(number)
-            except:
-                t.print_exc()
-                return 1
-            if verbose:
-                print("%d loops -> %.*g secs" % (number, precision, x))
-            if x >= 0.2:
-                break
-    try:
-        r = t.repeat(repeat, number)
-    except:
-        t.print_exc()
-        return 1
-    best = min(r)
-    if verbose:
-        print("raw times:", " ".join(["%.*g" % (precision, x) for x in r]))
-    print("%d loops," % number, end=' ')
-    usec = best * 1e6 / number
-    if usec < 1000:
-        print("best of %d: %.*g usec per loop" % (repeat, precision, usec))
-    else:
-        msec = usec / 1000
-        if msec < 1000:
-            print("best of %d: %.*g msec per loop" % (repeat, precision, msec))
-        else:
-            sec = msec / 1000
-            print("best of %d: %.*g sec per loop" % (repeat, precision, sec))
-    return None
-
-if __name__ == "__main__":
-    sys.exit(main())
+