--- <CPython-3.4.9>/test/test_decorators.py
+++ lib/test/test_decorators.py
@@ -1,39 +1,24 @@
 import unittest
-from test import support
-
+
+funcattrs_dict = {}                                                             ###
 def funcattrs(**kwds):
     def decorate(func):
-        func.__dict__.update(kwds)
+        funcattrs_dict.setdefault(func.__name__, {})                            ###
+        funcattrs_dict[func.__name__].update(kwds)                              ###
         return func
     return decorate
 
+MiscDecorators_dict = {}                                                        ###
 class MiscDecorators (object):
     @staticmethod
     def author(name):
         def decorate(func):
-            func.__dict__['author'] = name
+            MiscDecorators_dict[func.__name__] = name                           ###
             return func
         return decorate
 
 # -----------------------------------------------
 
-class DbcheckError (Exception):
-    def __init__(self, exprstr, func, args, kwds):
-        # A real version of this would set attributes here
-        Exception.__init__(self, "dbcheck %r failed (func=%s args=%s kwds=%s)" %
-                           (exprstr, func, args, kwds))
-
-
-def dbcheck(exprstr, globals=None, locals=None):
-    "Decorator to implement debugging assertions"
-    def decorate(func):
-        expr = compile(exprstr, "dbcheck-%s" % func.__name__, "eval")
-        def check(*args, **kwds):
-            if not eval(expr, globals, locals):
-                raise DbcheckError(exprstr, func, args, kwds)
-            return func(*args, **kwds)
-        return check
-    return decorate
 
 # -----------------------------------------------
 
@@ -45,7 +30,6 @@
         def call(*args, **kwds):
             counts[func_name] += 1
             return func(*args, **kwds)
-        call.__name__ = func_name
         return call
     return decorate
 
@@ -63,7 +47,6 @@
         except TypeError:
             # Unhashable argument
             return func(*args)
-    call.__name__ = func.__name__
     return call
 
 # -----------------------------------------------
@@ -88,41 +71,7 @@
         @decorators.author('Cleese')
         def foo(): return 42
         self.assertEqual(foo(), 42)
-        self.assertEqual(foo.author, 'Cleese')
-
-    def test_argforms(self):
-        # A few tests of argument passing, as we use restricted form
-        # of expressions for decorators.
-
-        def noteargs(*args, **kwds):
-            def decorate(func):
-                setattr(func, 'dbval', (args, kwds))
-                return func
-            return decorate
-
-        args = ( 'Now', 'is', 'the', 'time' )
-        kwds = dict(one=1, two=2)
-        @noteargs(*args, **kwds)
-        def f1(): return 42
-        self.assertEqual(f1(), 42)
-        self.assertEqual(f1.dbval, (args, kwds))
-
-        @noteargs('terry', 'gilliam', eric='idle', john='cleese')
-        def f2(): return 84
-        self.assertEqual(f2(), 84)
-        self.assertEqual(f2.dbval, (('terry', 'gilliam'),
-                                     dict(eric='idle', john='cleese')))
-
-        @noteargs(1, 2,)
-        def f3(): pass
-        self.assertEqual(f3.dbval, ((1, 2), {}))
-
-    def test_dbcheck(self):
-        @dbcheck('args[1] is not None')
-        def f(a, b):
-            return a + b
-        self.assertEqual(f(1, 2), 3)
-        self.assertRaises(DbcheckError, f, 1, None)
+        self.assertEqual(MiscDecorators_dict['foo'], 'Cleese')                  ###
 
     def test_memoize(self):
         counts = {}
@@ -131,7 +80,6 @@
         @countcalls(counts)
         def double(x):
             return x * 2
-        self.assertEqual(double.__name__, 'double')
 
         self.assertEqual(counts, dict(double=0))
 
@@ -151,44 +99,15 @@
         self.assertEqual(double([10]), [10, 10])
         self.assertEqual(counts['double'], 4)
 
-    def test_errors(self):
-        # Test syntax restrictions - these are all compile-time errors:
-        #
-        for expr in [ "1+2", "x[3]", "(1, 2)" ]:
-            # Sanity check: is expr is a valid expression by itself?
-            compile(expr, "testexpr", "exec")
-
-            codestr = "@%s\ndef f(): pass" % expr
-            self.assertRaises(SyntaxError, compile, codestr, "test", "exec")
-
-        # You can't put multiple decorators on a single line:
-        #
-        self.assertRaises(SyntaxError, compile,
-                          "@f1 @f2\ndef f(): pass", "test", "exec")
-
-        # Test runtime errors
-
-        def unimp(func):
-            raise NotImplementedError
-        context = dict(nullval=None, unimp=unimp)
-
-        for expr, exc in [ ("undef", NameError),
-                           ("nullval", TypeError),
-                           ("nullval.attr", AttributeError),
-                           ("unimp", NotImplementedError)]:
-            codestr = "@%s\ndef f(): pass\nassert f() is None" % expr
-            code = compile(codestr, "test", "exec")
-            self.assertRaises(exc, eval, code, context)
-
     def test_double(self):
         class C(object):
             @funcattrs(abc=1, xyz="haha")
             @funcattrs(booh=42)
             def foo(self): return 42
         self.assertEqual(C().foo(), 42)
-        self.assertEqual(C.foo.abc, 1)
-        self.assertEqual(C.foo.xyz, "haha")
-        self.assertEqual(C.foo.booh, 42)
+        self.assertEqual(funcattrs_dict['foo']['abc'], 1)                       ###
+        self.assertEqual(funcattrs_dict['foo']['xyz'], "haha")                  ###
+        self.assertEqual(funcattrs_dict['foo']['booh'], 42)                     ###
 
     def test_order(self):
         # Test that decorators are applied in the proper order to the function
@@ -301,9 +220,4 @@
         class C(object): pass
         self.assertEqual(C.extra, 'second')
 
-def test_main():
-    support.run_unittest(TestDecorators)
-    support.run_unittest(TestClassDecorators)
-
-if __name__=="__main__":
-    test_main()
+