--- <CPython-3.4.9>/test/test_genericpath.py
+++ lib/test/test_genericpath.py
@@ -103,8 +103,6 @@
             f.close()
             self.assertEqual(self.pathmodule.getsize(support.TESTFN), 3)
         finally:
-            if not f.closed:
-                f.close()
             support.unlink(support.TESTFN)
 
     def test_time(self):
@@ -125,8 +123,6 @@
                 self.pathmodule.getmtime(support.TESTFN)
             )
         finally:
-            if not f.closed:
-                f.close()
             support.unlink(support.TESTFN)
 
     def test_exists(self):
@@ -144,15 +140,6 @@
                 f.close()
             support.unlink(support.TESTFN)
 
-    @unittest.skipUnless(hasattr(os, "pipe"), "requires os.pipe()")
-    def test_exists_fd(self):
-        r, w = os.pipe()
-        try:
-            self.assertTrue(self.pathmodule.exists(r))
-        finally:
-            os.close(r)
-            os.close(w)
-        self.assertFalse(self.pathmodule.exists(r))
 
     def test_isdir(self):
         self.assertIs(self.pathmodule.isdir(support.TESTFN), False)
@@ -202,71 +189,6 @@
         finally:
             os.remove(test_fn)
 
-    @support.skip_unless_symlink
-    def test_samefile_on_symlink(self):
-        self._test_samefile_on_link_func(os.symlink)
-
-    def test_samefile_on_link(self):
-        self._test_samefile_on_link_func(os.link)
-
-    def _test_samefile_on_link_func(self, func):
-        try:
-            test_fn1 = support.TESTFN + "1"
-            test_fn2 = support.TESTFN + "2"
-            self._create_file(test_fn1)
-
-            func(test_fn1, test_fn2)
-            self.assertTrue(self.pathmodule.samefile(test_fn1, test_fn2))
-            os.remove(test_fn2)
-
-            self._create_file(test_fn2)
-            self.assertFalse(self.pathmodule.samefile(test_fn1, test_fn2))
-        finally:
-            os.remove(test_fn1)
-            os.remove(test_fn2)
-
-    def test_samestat(self):
-        try:
-            test_fn = support.TESTFN + "1"
-            self._create_file(test_fn)
-            test_fns = [test_fn]*2
-            stats = map(os.stat, test_fns)
-            self.assertTrue(self.pathmodule.samestat(*stats))
-        finally:
-            os.remove(test_fn)
-
-    @support.skip_unless_symlink
-    def test_samestat_on_symlink(self):
-        self._test_samestat_on_link_func(os.symlink)
-
-    def test_samestat_on_link(self):
-        self._test_samestat_on_link_func(os.link)
-
-    def _test_samestat_on_link_func(self, func):
-        try:
-            test_fn1 = support.TESTFN + "1"
-            test_fn2 = support.TESTFN + "2"
-            self._create_file(test_fn1)
-            test_fns = (test_fn1, test_fn2)
-            func(*test_fns)
-            stats = map(os.stat, test_fns)
-            self.assertTrue(self.pathmodule.samestat(*stats))
-            os.remove(test_fn2)
-
-            self._create_file(test_fn2)
-            stats = map(os.stat, test_fns)
-            self.assertFalse(self.pathmodule.samestat(*stats))
-
-            self.assertRaises(TypeError, self.pathmodule.samestat)
-        finally:
-            os.remove(test_fn1)
-            os.remove(test_fn2)
-
-    def test_sameopenfile(self):
-        fname = support.TESTFN + "1"
-        with open(fname, "wb") as a, open(fname, "wb") as b:
-            self.assertTrue(self.pathmodule.sameopenfile(
-                                a.fileno(), b.fileno()))
 
 class TestGenericTest(GenericTest, unittest.TestCase):
     # Issue 16852: GenericTest can't inherit from unittest.TestCase
@@ -284,9 +206,9 @@
         'curdir', 'pardir', 'extsep', 'sep',
         'pathsep', 'defpath', 'altsep', 'devnull',
         # Methods
-        'normcase', 'splitdrive', 'expandvars', 'normpath', 'abspath',
+        'normcase', 'splitdrive', 'normpath', 'abspath',                        ###
         'join', 'split', 'splitext', 'isabs', 'basename', 'dirname',
-        'lexists', 'islink', 'ismount', 'expanduser', 'normpath', 'realpath',
+        'lexists', 'islink', 'ismount', 'normpath', 'realpath',                 ###
     ]
 
     def test_normcase(self):
@@ -314,83 +236,20 @@
         self.assertEqual(splitdrive(b"foo:bar"), (b"", b"foo:bar"))
         self.assertEqual(splitdrive(b":foo:bar"), (b"", b":foo:bar"))
 
-    def test_expandvars(self):
-        if self.pathmodule.__name__ == 'macpath':
-            self.skipTest('macpath.expandvars is a stub')
-        expandvars = self.pathmodule.expandvars
-        with support.EnvironmentVarGuard() as env:
-            env.clear()
-            env["foo"] = "bar"
-            env["{foo"] = "baz1"
-            env["{foo}"] = "baz2"
-            self.assertEqual(expandvars("foo"), "foo")
-            self.assertEqual(expandvars("$foo bar"), "bar bar")
-            self.assertEqual(expandvars("${foo}bar"), "barbar")
-            self.assertEqual(expandvars("$[foo]bar"), "$[foo]bar")
-            self.assertEqual(expandvars("$bar bar"), "$bar bar")
-            self.assertEqual(expandvars("$?bar"), "$?bar")
-            self.assertEqual(expandvars("$foo}bar"), "bar}bar")
-            self.assertEqual(expandvars("${foo"), "${foo")
-            self.assertEqual(expandvars("${{foo}}"), "baz1}")
-            self.assertEqual(expandvars("$foo$foo"), "barbar")
-            self.assertEqual(expandvars("$bar$bar"), "$bar$bar")
-
-            self.assertEqual(expandvars(b"foo"), b"foo")
-            self.assertEqual(expandvars(b"$foo bar"), b"bar bar")
-            self.assertEqual(expandvars(b"${foo}bar"), b"barbar")
-            self.assertEqual(expandvars(b"$[foo]bar"), b"$[foo]bar")
-            self.assertEqual(expandvars(b"$bar bar"), b"$bar bar")
-            self.assertEqual(expandvars(b"$?bar"), b"$?bar")
-            self.assertEqual(expandvars(b"$foo}bar"), b"bar}bar")
-            self.assertEqual(expandvars(b"${foo"), b"${foo")
-            self.assertEqual(expandvars(b"${{foo}}"), b"baz1}")
-            self.assertEqual(expandvars(b"$foo$foo"), b"barbar")
-            self.assertEqual(expandvars(b"$bar$bar"), b"$bar$bar")
-
-    @unittest.skipUnless(support.FS_NONASCII, 'need support.FS_NONASCII')
-    def test_expandvars_nonascii(self):
-        if self.pathmodule.__name__ == 'macpath':
-            self.skipTest('macpath.expandvars is a stub')
-        expandvars = self.pathmodule.expandvars
-        def check(value, expected):
-            self.assertEqual(expandvars(value), expected)
-        with support.EnvironmentVarGuard() as env:
-            env.clear()
-            nonascii = support.FS_NONASCII
-            env['spam'] = nonascii
-            env[nonascii] = 'ham' + nonascii
-            check(nonascii, nonascii)
-            check('$spam bar', '%s bar' % nonascii)
-            check('${spam}bar', '%sbar' % nonascii)
-            check('${%s}bar' % nonascii, 'ham%sbar' % nonascii)
-            check('$bar%s bar' % nonascii, '$bar%s bar' % nonascii)
-            check('$spam}bar', '%s}bar' % nonascii)
-
-            check(os.fsencode(nonascii), os.fsencode(nonascii))
-            check(b'$spam bar', os.fsencode('%s bar' % nonascii))
-            check(b'${spam}bar', os.fsencode('%sbar' % nonascii))
-            check(os.fsencode('${%s}bar' % nonascii),
-                  os.fsencode('ham%sbar' % nonascii))
-            check(os.fsencode('$bar%s bar' % nonascii),
-                  os.fsencode('$bar%s bar' % nonascii))
-            check(b'$spam}bar', os.fsencode('%s}bar' % nonascii))
 
     def test_abspath(self):
         self.assertIn("foo", self.pathmodule.abspath("foo"))
         with warnings.catch_warnings():
-            warnings.simplefilter("ignore", DeprecationWarning)
             self.assertIn(b"foo", self.pathmodule.abspath(b"foo"))
 
         # Abspath returns bytes when the arg is bytes
         with warnings.catch_warnings():
-            warnings.simplefilter("ignore", DeprecationWarning)
             for path in (b'', b'foo', b'f\xf2\xf2', b'/foo', b'C:\\'):
                 self.assertIsInstance(self.pathmodule.abspath(path), bytes)
 
     def test_realpath(self):
         self.assertIn("foo", self.pathmodule.realpath("foo"))
         with warnings.catch_warnings():
-            warnings.simplefilter("ignore", DeprecationWarning)
             self.assertIn(b"foo", self.pathmodule.realpath(b"foo"))
 
     def test_normpath_issue5827(self):
@@ -430,10 +289,8 @@
             self.skipTest("need support.TESTFN_NONASCII")
 
         with warnings.catch_warnings():
-            warnings.simplefilter("ignore", DeprecationWarning)
             with support.temp_cwd(name):
                 self.test_abspath()
 
 
-if __name__=="__main__":
-    unittest.main()
+