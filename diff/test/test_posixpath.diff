--- <CPython-3.4.9>/test/test_posixpath.py
+++ lib/test/test_posixpath.py
@@ -7,10 +7,6 @@
 from posixpath import realpath, abspath, dirname, basename
 from test import support, test_genericpath
 
-try:
-    import posix
-except ImportError:
-    posix = None
 
 # An absolute path to a temporary filename for testing. We can't rely on TESTFN
 # being an absolute path, so we need this.
@@ -60,8 +56,6 @@
     def test_join_errors(self):
         # Check posixpath.join raises friendly TypeErrors.
         errmsg = "Can't mix strings and bytes in path components"
-        with self.assertRaisesRegex(TypeError, errmsg):
-            posixpath.join(b'bytes', 'str')
         with self.assertRaisesRegex(TypeError, errmsg):
             posixpath.join('str', b'bytes')
         # regression, see #15377
@@ -171,13 +165,6 @@
             f.write(b"foo")
             f.close()
             self.assertIs(posixpath.islink(support.TESTFN + "1"), False)
-            if support.can_symlink():
-                os.symlink(support.TESTFN + "1", support.TESTFN + "2")
-                self.assertIs(posixpath.islink(support.TESTFN + "2"), True)
-                os.remove(support.TESTFN + "1")
-                self.assertIs(posixpath.islink(support.TESTFN + "2"), True)
-                self.assertIs(posixpath.exists(support.TESTFN + "2"), False)
-                self.assertIs(posixpath.lexists(support.TESTFN + "2"), True)
         finally:
             if not f.close():
                 f.close()
@@ -185,7 +172,6 @@
     def test_ismount(self):
         self.assertIs(posixpath.ismount("/"), True)
         with warnings.catch_warnings():
-            warnings.simplefilter("ignore", DeprecationWarning)
             self.assertIs(posixpath.ismount(b"/"), True)
 
     def test_ismount_non_existent(self):
@@ -197,68 +183,6 @@
         finally:
             safe_rmdir(ABSTFN)
 
-    @unittest.skipUnless(support.can_symlink(),
-                         "Test requires symlink support")
-    def test_ismount_symlinks(self):
-        # Symlinks are never mountpoints.
-        try:
-            os.symlink("/", ABSTFN)
-            self.assertIs(posixpath.ismount(ABSTFN), False)
-        finally:
-            os.unlink(ABSTFN)
-
-    @unittest.skipIf(posix is None, "Test requires posix module")
-    def test_ismount_different_device(self):
-        # Simulate the path being on a different device from its parent by
-        # mocking out st_dev.
-        save_lstat = os.lstat
-        def fake_lstat(path):
-            st_ino = 0
-            st_dev = 0
-            if path == ABSTFN:
-                st_dev = 1
-                st_ino = 1
-            return posix.stat_result((0, st_ino, st_dev, 0, 0, 0, 0, 0, 0, 0))
-        try:
-            os.lstat = fake_lstat
-            self.assertIs(posixpath.ismount(ABSTFN), True)
-        finally:
-            os.lstat = save_lstat
-
-    def test_expanduser(self):
-        self.assertEqual(posixpath.expanduser("foo"), "foo")
-        self.assertEqual(posixpath.expanduser(b"foo"), b"foo")
-        try:
-            import pwd
-        except ImportError:
-            pass
-        else:
-            self.assertIsInstance(posixpath.expanduser("~/"), str)
-            self.assertIsInstance(posixpath.expanduser(b"~/"), bytes)
-            # if home directory == root directory, this test makes no sense
-            if posixpath.expanduser("~") != '/':
-                self.assertEqual(
-                    posixpath.expanduser("~") + "/",
-                    posixpath.expanduser("~/")
-                )
-                self.assertEqual(
-                    posixpath.expanduser(b"~") + b"/",
-                    posixpath.expanduser(b"~/")
-                )
-            self.assertIsInstance(posixpath.expanduser("~root/"), str)
-            self.assertIsInstance(posixpath.expanduser("~foo/"), str)
-            self.assertIsInstance(posixpath.expanduser(b"~root/"), bytes)
-            self.assertIsInstance(posixpath.expanduser(b"~foo/"), bytes)
-
-            with support.EnvironmentVarGuard() as env:
-                env['HOME'] = '/'
-                self.assertEqual(posixpath.expanduser("~"), "/")
-                self.assertEqual(posixpath.expanduser("~/foo"), "/foo")
-                # expanduser should fall back to using the password database
-                del env['HOME']
-                home = pwd.getpwuid(os.getuid()).pw_dir
-                # $HOME can end with a trailing /, so strip it (see #17809)
-                self.assertEqual(posixpath.expanduser("~"), home.rstrip("/"))
 
     def test_normpath(self):
         self.assertEqual(posixpath.normpath(""), ".")
@@ -300,172 +224,6 @@
         self.assertEqual(realpath(b'../..'), dirname(dirname(os.getcwdb())))
         self.assertEqual(realpath(b'/'.join([b'..'] * 100)), b'/')
 
-    @unittest.skipUnless(hasattr(os, "symlink"),
-                         "Missing symlink implementation")
-    @skip_if_ABSTFN_contains_backslash
-    def test_realpath_basic(self):
-        # Basic operation.
-        try:
-            os.symlink(ABSTFN+"1", ABSTFN)
-            self.assertEqual(realpath(ABSTFN), ABSTFN+"1")
-        finally:
-            support.unlink(ABSTFN)
-
-    @unittest.skipUnless(hasattr(os, "symlink"),
-                         "Missing symlink implementation")
-    @skip_if_ABSTFN_contains_backslash
-    def test_realpath_relative(self):
-        try:
-            os.symlink(posixpath.relpath(ABSTFN+"1"), ABSTFN)
-            self.assertEqual(realpath(ABSTFN), ABSTFN+"1")
-        finally:
-            support.unlink(ABSTFN)
-
-    @unittest.skipUnless(hasattr(os, "symlink"),
-                         "Missing symlink implementation")
-    @skip_if_ABSTFN_contains_backslash
-    def test_realpath_symlink_loops(self):
-        # Bug #930024, return the path unchanged if we get into an infinite
-        # symlink loop.
-        try:
-            os.symlink(ABSTFN, ABSTFN)
-            self.assertEqual(realpath(ABSTFN), ABSTFN)
-
-            os.symlink(ABSTFN+"1", ABSTFN+"2")
-            os.symlink(ABSTFN+"2", ABSTFN+"1")
-            self.assertEqual(realpath(ABSTFN+"1"), ABSTFN+"1")
-            self.assertEqual(realpath(ABSTFN+"2"), ABSTFN+"2")
-
-            self.assertEqual(realpath(ABSTFN+"1/x"), ABSTFN+"1/x")
-            self.assertEqual(realpath(ABSTFN+"1/.."), dirname(ABSTFN))
-            self.assertEqual(realpath(ABSTFN+"1/../x"), dirname(ABSTFN) + "/x")
-            os.symlink(ABSTFN+"x", ABSTFN+"y")
-            self.assertEqual(realpath(ABSTFN+"1/../" + basename(ABSTFN) + "y"),
-                             ABSTFN + "y")
-            self.assertEqual(realpath(ABSTFN+"1/../" + basename(ABSTFN) + "1"),
-                             ABSTFN + "1")
-
-            os.symlink(basename(ABSTFN) + "a/b", ABSTFN+"a")
-            self.assertEqual(realpath(ABSTFN+"a"), ABSTFN+"a/b")
-
-            os.symlink("../" + basename(dirname(ABSTFN)) + "/" +
-                       basename(ABSTFN) + "c", ABSTFN+"c")
-            self.assertEqual(realpath(ABSTFN+"c"), ABSTFN+"c")
-
-            # Test using relative path as well.
-            with support.change_cwd(dirname(ABSTFN)):
-                self.assertEqual(realpath(basename(ABSTFN)), ABSTFN)
-        finally:
-            support.unlink(ABSTFN)
-            support.unlink(ABSTFN+"1")
-            support.unlink(ABSTFN+"2")
-            support.unlink(ABSTFN+"y")
-            support.unlink(ABSTFN+"c")
-            support.unlink(ABSTFN+"a")
-
-    @unittest.skipUnless(hasattr(os, "symlink"),
-                         "Missing symlink implementation")
-    @skip_if_ABSTFN_contains_backslash
-    def test_realpath_repeated_indirect_symlinks(self):
-        # Issue #6975.
-        try:
-            os.mkdir(ABSTFN)
-            os.symlink('../' + basename(ABSTFN), ABSTFN + '/self')
-            os.symlink('self/self/self', ABSTFN + '/link')
-            self.assertEqual(realpath(ABSTFN + '/link'), ABSTFN)
-        finally:
-            support.unlink(ABSTFN + '/self')
-            support.unlink(ABSTFN + '/link')
-            safe_rmdir(ABSTFN)
-
-    @unittest.skipUnless(hasattr(os, "symlink"),
-                         "Missing symlink implementation")
-    @skip_if_ABSTFN_contains_backslash
-    def test_realpath_deep_recursion(self):
-        depth = 10
-        try:
-            os.mkdir(ABSTFN)
-            for i in range(depth):
-                os.symlink('/'.join(['%d' % i] * 10), ABSTFN + '/%d' % (i + 1))
-            os.symlink('.', ABSTFN + '/0')
-            self.assertEqual(realpath(ABSTFN + '/%d' % depth), ABSTFN)
-
-            # Test using relative path as well.
-            with support.change_cwd(ABSTFN):
-                self.assertEqual(realpath('%d' % depth), ABSTFN)
-        finally:
-            for i in range(depth + 1):
-                support.unlink(ABSTFN + '/%d' % i)
-            safe_rmdir(ABSTFN)
-
-    @unittest.skipUnless(hasattr(os, "symlink"),
-                         "Missing symlink implementation")
-    @skip_if_ABSTFN_contains_backslash
-    def test_realpath_resolve_parents(self):
-        # We also need to resolve any symlinks in the parents of a relative
-        # path passed to realpath. E.g.: current working directory is
-        # /usr/doc with 'doc' being a symlink to /usr/share/doc. We call
-        # realpath("a"). This should return /usr/share/doc/a/.
-        try:
-            os.mkdir(ABSTFN)
-            os.mkdir(ABSTFN + "/y")
-            os.symlink(ABSTFN + "/y", ABSTFN + "/k")
-
-            with support.change_cwd(ABSTFN + "/k"):
-                self.assertEqual(realpath("a"), ABSTFN + "/y/a")
-        finally:
-            support.unlink(ABSTFN + "/k")
-            safe_rmdir(ABSTFN + "/y")
-            safe_rmdir(ABSTFN)
-
-    @unittest.skipUnless(hasattr(os, "symlink"),
-                         "Missing symlink implementation")
-    @skip_if_ABSTFN_contains_backslash
-    def test_realpath_resolve_before_normalizing(self):
-        # Bug #990669: Symbolic links should be resolved before we
-        # normalize the path. E.g.: if we have directories 'a', 'k' and 'y'
-        # in the following hierarchy:
-        # a/k/y
-        #
-        # and a symbolic link 'link-y' pointing to 'y' in directory 'a',
-        # then realpath("link-y/..") should return 'k', not 'a'.
-        try:
-            os.mkdir(ABSTFN)
-            os.mkdir(ABSTFN + "/k")
-            os.mkdir(ABSTFN + "/k/y")
-            os.symlink(ABSTFN + "/k/y", ABSTFN + "/link-y")
-
-            # Absolute path.
-            self.assertEqual(realpath(ABSTFN + "/link-y/.."), ABSTFN + "/k")
-            # Relative path.
-            with support.change_cwd(dirname(ABSTFN)):
-                self.assertEqual(realpath(basename(ABSTFN) + "/link-y/.."),
-                                 ABSTFN + "/k")
-        finally:
-            support.unlink(ABSTFN + "/link-y")
-            safe_rmdir(ABSTFN + "/k/y")
-            safe_rmdir(ABSTFN + "/k")
-            safe_rmdir(ABSTFN)
-
-    @unittest.skipUnless(hasattr(os, "symlink"),
-                         "Missing symlink implementation")
-    @skip_if_ABSTFN_contains_backslash
-    def test_realpath_resolve_first(self):
-        # Bug #1213894: The first component of the path, if not absolute,
-        # must be resolved too.
-
-        try:
-            os.mkdir(ABSTFN)
-            os.mkdir(ABSTFN + "/k")
-            os.symlink(ABSTFN, ABSTFN + "link")
-            with support.change_cwd(dirname(ABSTFN)):
-                base = basename(ABSTFN)
-                self.assertEqual(realpath(base + "link"), ABSTFN)
-                self.assertEqual(realpath(base + "link/k"), ABSTFN + "/k")
-        finally:
-            support.unlink(ABSTFN + "link")
-            safe_rmdir(ABSTFN + "/k")
-            safe_rmdir(ABSTFN)
 
     def test_relpath(self):
         (real_getcwd, os.getcwd) = (os.getcwd, lambda: r"/home/user/bar")
@@ -526,8 +284,7 @@
 
 class PosixCommonTest(test_genericpath.CommonTest, unittest.TestCase):
     pathmodule = posixpath
-    attributes = ['relpath', 'samefile', 'sameopenfile', 'samestat']
-
-
-if __name__=="__main__":
-    unittest.main()
+    attributes = ['relpath', 'samefile']                                        ###
+
+
+