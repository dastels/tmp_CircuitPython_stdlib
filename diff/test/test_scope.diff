--- <CPython-3.4.9>/test/test_scope.py
+++ lib/test/test_scope.py
@@ -1,7 +1,5 @@
 import unittest
-import weakref
-
-from test.support import check_syntax_error, cpython_only, run_unittest
+
 
 
 class ScopeTests(unittest.TestCase):
@@ -128,43 +126,6 @@
         h = g(2, 4, 6)
         self.assertEqual(h(), 39)
 
-    def testFreeVarInMethod(self):
-
-        def test():
-            method_and_var = "var"
-            class Test:
-                def method_and_var(self):
-                    return "method"
-                def test(self):
-                    return method_and_var
-                def actual_global(self):
-                    return str("global")
-                def str(self):
-                    return str(self)
-            return Test()
-
-        t = test()
-        self.assertEqual(t.test(), "var")
-        self.assertEqual(t.method_and_var(), "method")
-        self.assertEqual(t.actual_global(), "global")
-
-        method_and_var = "var"
-        class Test:
-            # this class is not nested, so the rules are different
-            def method_and_var(self):
-                return "method"
-            def test(self):
-                return method_and_var
-            def actual_global(self):
-                return str("global")
-            def str(self):
-                return str(self)
-
-        t = Test()
-        self.assertEqual(t.test(), "var")
-        self.assertEqual(t.method_and_var(), "method")
-        self.assertEqual(t.actual_global(), "global")
-
     def testCellIsKwonlyArg(self):
         # Issue 1409: Initialisation of a cell value,
         # when it comes from a keyword-only parameter
@@ -192,40 +153,6 @@
         self.assertEqual(f(6), 720)
 
 
-    def testUnoptimizedNamespaces(self):
-
-        check_syntax_error(self, """if 1:
-            def unoptimized_clash1(strip):
-                def f(s):
-                    from sys import *
-                    return getrefcount(s) # ambiguity: free or local
-                return f
-            """)
-
-        check_syntax_error(self, """if 1:
-            def unoptimized_clash2():
-                from sys import *
-                def f(s):
-                    return getrefcount(s) # ambiguity: global or local
-                return f
-            """)
-
-        check_syntax_error(self, """if 1:
-            def unoptimized_clash2():
-                from sys import *
-                def g():
-                    def f(s):
-                        return getrefcount(s) # ambiguity: global or local
-                    return f
-            """)
-
-        check_syntax_error(self, """if 1:
-            def f():
-                def g():
-                    from sys import *
-                    return getrefcount # global or local?
-            """)
-
     def testLambdas(self):
 
         f1 = lambda x: lambda y: x + y
@@ -250,58 +177,6 @@
         h = g(2, 4, 6)
         self.assertEqual(h(), 18)
 
-    def testUnboundLocal(self):
-
-        def errorInOuter():
-            print(y)
-            def inner():
-                return y
-            y = 1
-
-        def errorInInner():
-            def inner():
-                return y
-            inner()
-            y = 1
-
-        self.assertRaises(UnboundLocalError, errorInOuter)
-        self.assertRaises(NameError, errorInInner)
-
-    def testUnboundLocal_AfterDel(self):
-        # #4617: It is now legal to delete a cell variable.
-        # The following functions must obviously compile,
-        # and give the correct error when accessing the deleted name.
-        def errorInOuter():
-            y = 1
-            del y
-            print(y)
-            def inner():
-                return y
-
-        def errorInInner():
-            def inner():
-                return y
-            y = 1
-            del y
-            inner()
-
-        self.assertRaises(UnboundLocalError, errorInOuter)
-        self.assertRaises(NameError, errorInInner)
-
-    def testUnboundLocal_AugAssign(self):
-        # test for bug #1501934: incorrect LOAD/STORE_GLOBAL generation
-        exec("""if 1:
-            global_x = 1
-            def f():
-                global_x += 1
-            try:
-                f()
-            except UnboundLocalError:
-                pass
-            else:
-                fail('scope of global_x not correctly determined')
-            """, {'fail': self.fail})
-
     def testComplexDefinitions(self):
 
         def makeReturner(*lst):
@@ -317,153 +192,6 @@
             return returner
 
         self.assertEqual(makeReturner2(a=11)()['a'], 11)
-
-    def testScopeOfGlobalStmt(self):
-        # Examples posted by Samuele Pedroni to python-dev on 3/1/2001
-
-        exec("""if 1:
-            # I
-            x = 7
-            def f():
-                x = 1
-                def g():
-                    global x
-                    def i():
-                        def h():
-                            return x
-                        return h()
-                    return i()
-                return g()
-            self.assertEqual(f(), 7)
-            self.assertEqual(x, 7)
-
-            # II
-            x = 7
-            def f():
-                x = 1
-                def g():
-                    x = 2
-                    def i():
-                        def h():
-                            return x
-                        return h()
-                    return i()
-                return g()
-            self.assertEqual(f(), 2)
-            self.assertEqual(x, 7)
-
-            # III
-            x = 7
-            def f():
-                x = 1
-                def g():
-                    global x
-                    x = 2
-                    def i():
-                        def h():
-                            return x
-                        return h()
-                    return i()
-                return g()
-            self.assertEqual(f(), 2)
-            self.assertEqual(x, 2)
-
-            # IV
-            x = 7
-            def f():
-                x = 3
-                def g():
-                    global x
-                    x = 2
-                    def i():
-                        def h():
-                            return x
-                        return h()
-                    return i()
-                return g()
-            self.assertEqual(f(), 2)
-            self.assertEqual(x, 2)
-
-            # XXX what about global statements in class blocks?
-            # do they affect methods?
-
-            x = 12
-            class Global:
-                global x
-                x = 13
-                def set(self, val):
-                    x = val
-                def get(self):
-                    return x
-
-            g = Global()
-            self.assertEqual(g.get(), 13)
-            g.set(15)
-            self.assertEqual(g.get(), 13)
-            """)
-
-    def testLeaks(self):
-
-        class Foo:
-            count = 0
-
-            def __init__(self):
-                Foo.count += 1
-
-            def __del__(self):
-                Foo.count -= 1
-
-        def f1():
-            x = Foo()
-            def f2():
-                return x
-            f2()
-
-        for i in range(100):
-            f1()
-
-        self.assertEqual(Foo.count, 0)
-
-    def testClassAndGlobal(self):
-
-        exec("""if 1:
-            def test(x):
-                class Foo:
-                    global x
-                    def __call__(self, y):
-                        return x + y
-                return Foo()
-
-            x = 0
-            self.assertEqual(test(6)(2), 8)
-            x = -1
-            self.assertEqual(test(3)(2), 5)
-
-            looked_up_by_load_name = False
-            class X:
-                # Implicit globals inside classes are be looked up by LOAD_NAME, not
-                # LOAD_GLOBAL.
-                locals()['looked_up_by_load_name'] = True
-                passed = looked_up_by_load_name
-
-            self.assertTrue(X.passed)
-            """)
-
-    def testLocalsFunction(self):
-
-        def f(x):
-            def g(y):
-                def h(z):
-                    return y + z
-                w = x + y
-                y += 3
-                return locals()
-            return g
-
-        d = f(2)(4)
-        self.assertIn('h', d)
-        del d['h']
-        self.assertEqual(d, {'x': 2, 'y': 7, 'w': 6})
 
     def testLocalsClass(self):
         # This test verifies that calling locals() does not pollute
@@ -498,23 +226,6 @@
         self.assertNotIn("x", varnames)
         self.assertIn("y", varnames)
 
-    @cpython_only
-    def testLocalsClass_WithTrace(self):
-        # Issue23728: after the trace function returns, the locals()
-        # dictionary is used to update all variables, this used to
-        # include free variables. But in class statements, free
-        # variables are not inserted...
-        import sys
-        self.addCleanup(sys.settrace, sys.gettrace())
-        sys.settrace(lambda a,b,c:None)
-        x = 12
-
-        class C:
-            def f(self):
-                return x
-
-        self.assertEqual(x, 12) # Used to raise UnboundLocalError
-
     def testBoundAndFree(self):
         # var is bound and free in class
 
@@ -527,45 +238,6 @@
 
         inst = f(3)()
         self.assertEqual(inst.a, inst.m())
-
-    @cpython_only
-    def testInteractionWithTraceFunc(self):
-
-        import sys
-        def tracer(a,b,c):
-            return tracer
-
-        def adaptgetter(name, klass, getter):
-            kind, des = getter
-            if kind == 1:       # AV happens when stepping from this line to next
-                if des == "":
-                    des = "_%s__%s" % (klass.__name__, name)
-                return lambda obj: getattr(obj, des)
-
-        class TestClass:
-            pass
-
-        self.addCleanup(sys.settrace, sys.gettrace())
-        sys.settrace(tracer)
-        adaptgetter("foo", TestClass, (1, ""))
-        sys.settrace(None)
-
-        self.assertRaises(TypeError, sys.settrace)
-
-    def testEvalExecFreeVars(self):
-
-        def f(x):
-            return lambda: x + 1
-
-        g = f(3)
-        self.assertRaises(TypeError, eval, g.__code__)
-
-        try:
-            exec(g.__code__, {})
-        except TypeError:
-            pass
-        else:
-            self.fail("exec should have failed, because code contained free vars")
 
     def testListCompLocalVars(self):
 
@@ -584,16 +256,6 @@
             print(bad)
         except NameError:
             pass
-
-    def testEvalFreeVars(self):
-
-        def f(x):
-            def g():
-                x
-                eval("x + 1")
-            return g
-
-        f(4)()
 
     def testFreeingCell(self):
         # Test what happens when a finalizer accesses
@@ -675,7 +337,6 @@
 
         c = f(0)
         self.assertEqual(c.get(), 1)
-        self.assertNotIn("x", c.__class__.__dict__)
 
 
     def testNonLocalGenerator(self):
@@ -715,50 +376,4 @@
         def b():
             global a
 
-    def testClassNamespaceOverridesClosure(self):
-        # See #17853.
-        x = 42
-        class X:
-            locals()["x"] = 43
-            y = x
-        self.assertEqual(X.y, 43)
-        class X:
-            locals()["x"] = 43
-            del x
-        self.assertFalse(hasattr(X, "x"))
-        self.assertEqual(x, 42)
-
-    @cpython_only
-    def testCellLeak(self):
-        # Issue 17927.
-        #
-        # The issue was that if self was part of a cycle involving the
-        # frame of a method call, *and* the method contained a nested
-        # function referencing self, thereby forcing 'self' into a
-        # cell, setting self to None would not be enough to break the
-        # frame -- the frame had another reference to the instance,
-        # which could not be cleared by the code running in the frame
-        # (though it will be cleared when the frame is collected).
-        # Without the lambda, setting self to None is enough to break
-        # the cycle.
-        class Tester:
-            def dig(self):
-                if 0:
-                    lambda: self
-                try:
-                    1/0
-                except Exception as exc:
-                    self.exc = exc
-                self = None  # Break the cycle
-        tester = Tester()
-        tester.dig()
-        ref = weakref.ref(tester)
-        del tester
-        self.assertIsNone(ref())
-
-
-def test_main():
-    run_unittest(ScopeTests)
-
-if __name__ == '__main__':
-    test_main()
+