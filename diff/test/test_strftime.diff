--- <CPython-3.4.9>/test/test_strftime.py
+++ lib/test/test_strftime.py
@@ -2,7 +2,6 @@
 Unittest for time.strftime
 """
 
-import calendar
 import sys
 import re
 from test import support
@@ -53,14 +52,6 @@
 
         self.now = now
 
-    def setUp(self):
-        try:
-            import java
-            java.util.Locale.setDefault(java.util.Locale.US)
-        except ImportError:
-            import locale
-            locale.setlocale(locale.LC_TIME, 'C')
-
     def test_strftime(self):
         now = time.time()
         self._update_variables(now)
@@ -85,10 +76,6 @@
         # Make sure any characters that could be taken as regex syntax is
         # escaped in escapestr()
         expectations = (
-            ('%a', calendar.day_abbr[now[6]], 'abbreviated weekday name'),
-            ('%A', calendar.day_name[now[6]], 'full weekday name'),
-            ('%b', calendar.month_abbr[now[1]], 'abbreviated month name'),
-            ('%B', calendar.month_name[now[1]], 'full month name'),
             # %c see below
             ('%d', '%02d' % now[2], 'day of month as number (00-31)'),
             ('%H', '%02d' % now[3], 'hour (00-23)'),
@@ -98,11 +85,7 @@
             ('%M', '%02d' % now[4], 'minute, (00-59)'),
             ('%p', self.ampm, 'AM or PM as appropriate'),
             ('%S', '%02d' % now[5], 'seconds of current time (00-60)'),
-            ('%U', '%02d' % ((now[7] + self.jan1[6])//7),
-             'week number of the year (Sun 1st)'),
             ('%w', '0?%d' % ((1+now[6]) % 7), 'weekday as a number (Sun 1st)'),
-            ('%W', '%02d' % ((now[7] + (self.jan1[6] - 1)%7)//7),
-            'week number of the year (Mon 1st)'),
             # %x see below
             ('%X', '%02d:%02d:%02d' % (now[3], now[4], now[5]), '%H:%M:%S'),
             ('%y', '%02d' % (now[0]%100), 'year without century'),
@@ -132,7 +115,6 @@
 
         nonstandard_expectations = (
         # These are standard but don't have predictable output
-            ('%c', fixasctime(time.asctime(now)), 'near-asctime() format'),
             ('%x', '%02d/%02d/%02d' % (now[1], now[2], (now[0]%100)),
             '%m/%d/%y %H:%M:%S'),
             ('%Z', '%s' % self.tz, 'time zone name'),
@@ -140,7 +122,6 @@
             # These are some platform specific extensions
             ('%D', '%02d/%02d/%02d' % (now[1], now[2], (now[0]%100)), 'mm/dd/yy'),
             ('%e', '%2d' % now[2], 'day of month as number, blank padded ( 0-31)'),
-            ('%h', calendar.month_abbr[now[1]], 'abbreviated month name'),
             ('%k', '%2d' % now[3], 'hour, blank padded ( 0-23)'),
             ('%n', '\n', 'newline character'),
             ('%r', '%02d:%02d:%02d %s' % (self.clock12, now[4], now[5], self.ampm),
@@ -185,11 +166,7 @@
     def test_y_before_1900(self):
         # Issue #13674, #19634
         t = (1899, 1, 1, 0, 0, 0, 0, 0, 0)
-        if (sys.platform == "win32"
-        or sys.platform.startswith(("aix", "sunos", "solaris"))):
-            with self.assertRaises(ValueError):
-                time.strftime("%y", t)
-        else:
+        if True:                                                                ###
             self.assertEqual(time.strftime("%y", t), "99")
 
     def test_y_1900(self):
@@ -200,5 +177,4 @@
         self.assertEqual(
             time.strftime("%y", (2013, 1, 1, 0, 0, 0, 0, 0, 0)), "13")
 
-if __name__ == '__main__':
-    unittest.main()
+