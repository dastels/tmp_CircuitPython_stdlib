--- <CPython-3.4.9>/test/test_complex.py
+++ lib/test/test_complex.py
@@ -72,14 +72,11 @@
         if x != 0:
             q = z / x
             self.assertClose(q, y)
-            q = z.__truediv__(x)
-            self.assertClose(q, y)
         if y != 0:
             q = z / y
             self.assertClose(q, x)
-            q = z.__truediv__(y)
-            self.assertClose(q, x)
-
+
+    @unittest.expectedFailure                                                   ###
     def test_truediv(self):
         simple_real = [float(i) for i in range(-5, 6)]
         simple_complex = [complex(x, y) for x in simple_real for y in simple_real]
@@ -97,39 +94,18 @@
             self.check_div(complex(random(), random()),
                            complex(random(), random()))
 
-        self.assertRaises(ZeroDivisionError, complex.__truediv__, 1+1j, 0+0j)
-        # FIXME: The following currently crashes on Alpha
-        # self.assertRaises(OverflowError, pow, 1e200+1j, 1e200+1j)
-
-        self.assertAlmostEqual(complex.__truediv__(2+0j, 1+1j), 1-1j)
-        self.assertRaises(ZeroDivisionError, complex.__truediv__, 1+1j, 0+0j)
 
         for denom_real, denom_imag in [(0, NAN), (NAN, 0), (NAN, NAN)]:
             z = complex(0, 0) / complex(denom_real, denom_imag)
             self.assertTrue(isnan(z.real))
             self.assertTrue(isnan(z.imag))
 
+    @unittest.skip("Missing complex.__floordiv__")                              ###
     def test_floordiv(self):
         self.assertRaises(TypeError, complex.__floordiv__, 3+0j, 1.5+0j)
         self.assertRaises(TypeError, complex.__floordiv__, 3+0j, 0+0j)
 
     def test_richcompare(self):
-        self.assertIs(complex.__eq__(1+1j, 1<<10000), False)
-        self.assertIs(complex.__lt__(1+1j, None), NotImplemented)
-        self.assertIs(complex.__eq__(1+1j, 1+1j), True)
-        self.assertIs(complex.__eq__(1+1j, 2+2j), False)
-        self.assertIs(complex.__ne__(1+1j, 1+1j), False)
-        self.assertIs(complex.__ne__(1+1j, 2+2j), True)
-        for i in range(1, 100):
-            f = i / 100.0
-            self.assertIs(complex.__eq__(f+0j, f), True)
-            self.assertIs(complex.__ne__(f+0j, f), False)
-            self.assertIs(complex.__eq__(complex(f, f), f), False)
-            self.assertIs(complex.__ne__(complex(f, f), f), True)
-        self.assertIs(complex.__lt__(1+1j, 2+2j), NotImplemented)
-        self.assertIs(complex.__le__(1+1j, 2+2j), NotImplemented)
-        self.assertIs(complex.__gt__(1+1j, 2+2j), NotImplemented)
-        self.assertIs(complex.__ge__(1+1j, 2+2j), NotImplemented)
         self.assertRaises(TypeError, operator.lt, 1+1j, 2+2j)
         self.assertRaises(TypeError, operator.le, 1+1j, 2+2j)
         self.assertRaises(TypeError, operator.gt, 1+1j, 2+2j)
@@ -139,6 +115,7 @@
         self.assertIs(operator.ne(1+1j, 1+1j), False)
         self.assertIs(operator.ne(1+1j, 2+2j), True)
 
+    @unittest.skip("Missing dunder methods")                                    ###
     def test_richcompare_boundaries(self):
         def check(n, deltas, is_equal, imag = 0.0):
             for delta in deltas:
@@ -156,6 +133,7 @@
             check(2 ** pow, range(1, 101), lambda delta: False, float(i))
         check(2 ** 53, range(-100, 0), lambda delta: True)
 
+    @unittest.skip("Missing complex.__mod__")                                   ###
     def test_mod(self):
         # % is no longer supported on complex numbers
         self.assertRaises(TypeError, (1+1j).__mod__, 0+0j)
@@ -171,8 +149,6 @@
         self.assertAlmostEqual(pow(0+0j, 2+0j), 0.0)
         self.assertRaises(ZeroDivisionError, pow, 0+0j, 1j)
         self.assertAlmostEqual(pow(1j, -1), 1/1j)
-        self.assertAlmostEqual(pow(1j, 200), 1)
-        self.assertRaises(ValueError, pow, 1+1j, 1+1j, 1+1j)
 
         a = 3.33+4.43j
         self.assertEqual(a ** 0j, 1)
@@ -202,14 +178,13 @@
 
         self.assertEqual(0.0j ** 0, 1)
 
-        b = 5.1+2.3j
-        self.assertRaises(ValueError, pow, a, b, 0)
 
     def test_boolcontext(self):
         for i in range(100):
             self.assertTrue(complex(random() + 1e-6, random() + 1e-6))
         self.assertTrue(not complex(0.0, 0.0))
 
+    @unittest.skip("Missing complex.conjugate")                                 ###
     def test_conjugate(self):
         self.assertClose(complex(5.3, 9.8).conjugate(), 5.3-9.8j)
 
@@ -220,15 +195,12 @@
         class NS(object):
             def __init__(self, value): self.value = value
             def __complex__(self): return self.value
-        self.assertEqual(complex(OS(1+10j)), 1+10j)
-        self.assertEqual(complex(NS(1+10j)), 1+10j)
         self.assertRaises(TypeError, complex, OS(None))
         self.assertRaises(TypeError, complex, NS(None))
         self.assertRaises(TypeError, complex, {})
         self.assertRaises(TypeError, complex, NS(1.5))
         self.assertRaises(TypeError, complex, NS(1))
 
-        self.assertAlmostEqual(complex("1+10j"), 1+10j)
         self.assertAlmostEqual(complex(10), 10+0j)
         self.assertAlmostEqual(complex(10.0), 10+0j)
         self.assertAlmostEqual(complex(10), 10+0j)
@@ -259,26 +231,7 @@
         self.assertAlmostEqual(complex(),  0)
         self.assertAlmostEqual(complex("-1"), -1)
         self.assertAlmostEqual(complex("+1"), +1)
-        self.assertAlmostEqual(complex("(1+2j)"), 1+2j)
-        self.assertAlmostEqual(complex("(1.3+2.2j)"), 1.3+2.2j)
-        self.assertAlmostEqual(complex("3.14+1J"), 3.14+1j)
-        self.assertAlmostEqual(complex(" ( +3.14-6J )"), 3.14-6j)
-        self.assertAlmostEqual(complex(" ( +3.14-J )"), 3.14-1j)
-        self.assertAlmostEqual(complex(" ( +3.14+j )"), 3.14+1j)
-        self.assertAlmostEqual(complex("J"), 1j)
-        self.assertAlmostEqual(complex("( j )"), 1j)
-        self.assertAlmostEqual(complex("+J"), 1j)
-        self.assertAlmostEqual(complex("( -j)"), -1j)
-        self.assertAlmostEqual(complex('1e-500'), 0.0 + 0.0j)
-        self.assertAlmostEqual(complex('-1e-500j'), 0.0 - 0.0j)
-        self.assertAlmostEqual(complex('-1e-500+1e-500j'), -0.0 + 0.0j)
-
-        class complex2(complex): pass
-        self.assertAlmostEqual(complex(complex2(1+1j)), 1+1j)
-        self.assertAlmostEqual(complex(real=17, imag=23), 17+23j)
-        self.assertAlmostEqual(complex(real=17+23j), 17+23j)
-        self.assertAlmostEqual(complex(real=17+23j, imag=23), 17+46j)
-        self.assertAlmostEqual(complex(real=1+2j, imag=3+4j), -3+5j)
+
 
         # check that the sign of a zero in the real or imaginary part
         # is preserved when constructing from two floats.  (These checks
@@ -288,7 +241,6 @@
             return atan2(x, -1.)
 
         self.assertEqual(split_zeros(complex(1., 0.).imag), split_zeros(0.))
-        self.assertEqual(split_zeros(complex(1., -0.).imag), split_zeros(-0.))
         self.assertEqual(split_zeros(complex(0., 1.).real), split_zeros(0.))
         self.assertEqual(split_zeros(complex(-0., 1.).real), split_zeros(-0.))
 
@@ -308,7 +260,6 @@
         self.assertRaises(TypeError, float, 5+3j)
         self.assertRaises(ValueError, complex, "")
         self.assertRaises(TypeError, complex, None)
-        self.assertRaisesRegex(TypeError, "not 'NoneType'", complex, None)
         self.assertRaises(ValueError, complex, "\0")
         self.assertRaises(ValueError, complex, "3\09")
         self.assertRaises(TypeError, complex, "1", "2")
@@ -333,49 +284,7 @@
 
         # check that complex accepts long unicode strings
         self.assertEqual(type(complex("1"*500)), complex)
-        # check whitespace processing
-        self.assertEqual(complex('\N{EM SPACE}(\N{EN SPACE}1+1j ) '), 1+1j)
-
-        class EvilExc(Exception):
-            pass
-
-        class evilcomplex:
-            def __complex__(self):
-                raise EvilExc
-
-        self.assertRaises(EvilExc, complex, evilcomplex())
-
-        class float2:
-            def __init__(self, value):
-                self.value = value
-            def __float__(self):
-                return self.value
-
-        self.assertAlmostEqual(complex(float2(42.)), 42)
-        self.assertAlmostEqual(complex(real=float2(17.), imag=float2(23.)), 17+23j)
-        self.assertRaises(TypeError, complex, float2(None))
-
-        class complex0(complex):
-            """Test usage of __complex__() when inheriting from 'complex'"""
-            def __complex__(self):
-                return 42j
-
-        class complex1(complex):
-            """Test usage of __complex__() with a __new__() method"""
-            def __new__(self, value=0j):
-                return complex.__new__(self, 2*value)
-            def __complex__(self):
-                return self
-
-        class complex2(complex):
-            """Make sure that __complex__() calls fail if anything other than a
-            complex is returned"""
-            def __complex__(self):
-                return None
-
-        self.assertAlmostEqual(complex(complex0(1j)), 42j)
-        self.assertAlmostEqual(complex(complex1(1j)), 2j)
-        self.assertRaises(TypeError, complex, complex2(1j))
+
 
     def test_hash(self):
         for x in range(-30, 30):
@@ -396,7 +305,6 @@
         test(1+6j, '(1+6j)')
         test(1-6j, '(1-6j)')
 
-        test(-(1+0j), '(-1+-0j)', test_fn=self.assertNotEqual)
 
         test(complex(1., INF), "(1+infj)")
         test(complex(1., -INF), "(1-infj)")
@@ -410,8 +318,6 @@
         test(complex(0, -INF), "-infj")
         test(complex(0, NAN), "nanj")
 
-        self.assertEqual(1-6j,complex(repr(1-6j)))
-        self.assertEqual(1+6j,complex(repr(1+6j)))
         self.assertEqual(-6j,complex(repr(-6j)))
         self.assertEqual(6j,complex(repr(6j)))
 
@@ -422,14 +328,9 @@
             test_fn(str(v), expected)
 
         test(complex(0., 1.),   "1j")
-        test(complex(-0., 1.),  "(-0+1j)")
         test(complex(0., -1.),  "-1j")
-        test(complex(-0., -1.), "(-0-1j)")
 
         test(complex(0., 0.),   "0j")
-        test(complex(0., -0.),  "-0j")
-        test(complex(-0., 0.),  "(-0+0j)")
-        test(complex(-0., -0.), "(-0-0j)")
 
     def test_neg(self):
         self.assertEqual(-(1+6j), -1-6j)
@@ -446,10 +347,11 @@
             fo = open(support.TESTFN, "r")
             self.assertEqual(fo.read(), ("%s %s\n" % (a, b)))
         finally:
-            if (fo is not None) and (not fo.closed):
+            if (fo is not None):                                                ### .closed is missing
                 fo.close()
             support.unlink(support.TESTFN)
 
+    @unittest.skip("Missing complex.__getnewargs__")                            ###
     def test_getnewargs(self):
         self.assertEqual((1+2j).__getnewargs__(), (1.0, 2.0))
         self.assertEqual((1-2j).__getnewargs__(), (1.0, -2.0))
@@ -466,27 +368,11 @@
         self.assertEqual(atan2(z2.imag, -1.), atan2(-0., -1.))
 
     @support.requires_IEEE_754
-    def test_negated_imaginary_literal(self):
-        z0 = -0j
-        z1 = -7j
-        z2 = -1e1000j
-        # Note: In versions of Python < 3.2, a negated imaginary literal
-        # accidentally ended up with real part 0.0 instead of -0.0, thanks to a
-        # modification during CST -> AST translation (see issue #9011).  That's
-        # fixed in Python 3.2.
-        self.assertFloatsAreIdentical(z0.real, -0.0)
-        self.assertFloatsAreIdentical(z0.imag, -0.0)
-        self.assertFloatsAreIdentical(z1.real, -0.0)
-        self.assertFloatsAreIdentical(z1.imag, -7.0)
-        self.assertFloatsAreIdentical(z2.real, -0.0)
-        self.assertFloatsAreIdentical(z2.imag, -INF)
-
-    @support.requires_IEEE_754
     def test_overflow(self):
         self.assertEqual(complex("1e500"), complex(INF, 0.0))
         self.assertEqual(complex("-1e500j"), complex(0.0, -INF))
-        self.assertEqual(complex("-1e500+1.8e308j"), complex(-INF, INF))
-
+
+    @unittest.expectedFailure                                                   ###
     @support.requires_IEEE_754
     def test_repr_roundtrip(self):
         vals = [0.0, 1e-500, 1e-315, 1e-200, 0.0123, 3.1415, 1e50, INF, NAN]
@@ -515,6 +401,7 @@
                 self.assertFloatsAreIdentical(0.0 + z.imag,
                                               0.0 + roundtrip.imag)
 
+    @unittest.skip("Missing format()")                                          ###
     def test_format(self):
         # empty format string is same as str()
         self.assertEqual(format(1+3j, ''), str(1+3j))
@@ -636,8 +523,4 @@
         self.assertEqual(format(complex(INF, 1), 'F'), 'INF+1.000000j')
         self.assertEqual(format(complex(INF, -1), 'F'), 'INF-1.000000j')
 
-def test_main():
-    support.run_unittest(ComplexTest)
-
-if __name__ == "__main__":
-    test_main()
+