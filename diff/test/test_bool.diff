--- <CPython-3.4.9>/test/test_bool.py
+++ lib/test/test_bool.py
@@ -6,17 +6,6 @@
 import os
 
 class BoolTest(unittest.TestCase):
-
-    def test_subclass(self):
-        try:
-            class C(bool):
-                pass
-        except TypeError:
-            pass
-        else:
-            self.fail("bool should not be subclassable")
-
-        self.assertRaises(TypeError, int.__new__, bool, 0)
 
     def test_print(self):
         try:
@@ -103,15 +92,6 @@
 
         for a in False, True:
             for b in False, True:
-                self.assertIs(a&b, bool(int(a)&int(b)))
-                self.assertIs(a|b, bool(int(a)|int(b)))
-                self.assertIs(a^b, bool(int(a)^int(b)))
-                self.assertEqual(a&int(b), int(a)&int(b))
-                self.assertIsNot(a&int(b), bool(int(a)&int(b)))
-                self.assertEqual(a|int(b), int(a)|int(b))
-                self.assertIsNot(a|int(b), bool(int(a)|int(b)))
-                self.assertEqual(a^int(b), int(a)^int(b))
-                self.assertIsNot(a^int(b), bool(int(a)^int(b)))
                 self.assertEqual(int(a)&b, int(a)&int(b))
                 self.assertIsNot(int(a)&b, bool(int(a)&int(b)))
                 self.assertEqual(int(a)|b, int(a)|int(b))
@@ -180,13 +160,10 @@
     def test_isinstance(self):
         self.assertIs(isinstance(True, bool), True)
         self.assertIs(isinstance(False, bool), True)
-        self.assertIs(isinstance(True, int), True)
-        self.assertIs(isinstance(False, int), True)
         self.assertIs(isinstance(1, bool), False)
         self.assertIs(isinstance(0, bool), False)
 
     def test_issubclass(self):
-        self.assertIs(issubclass(bool, int), True)
         self.assertIs(issubclass(int, bool), False)
 
     def test_contains(self):
@@ -196,24 +173,14 @@
     def test_string(self):
         self.assertIs("xyz".endswith("z"), True)
         self.assertIs("xyz".endswith("x"), False)
-        self.assertIs("xyz0123".isalnum(), True)
-        self.assertIs("@#$%".isalnum(), False)
         self.assertIs("xyz".isalpha(), True)
         self.assertIs("@#$%".isalpha(), False)
         self.assertIs("0123".isdigit(), True)
         self.assertIs("xyz".isdigit(), False)
         self.assertIs("xyz".islower(), True)
         self.assertIs("XYZ".islower(), False)
-        self.assertIs("0123".isdecimal(), True)
-        self.assertIs("xyz".isdecimal(), False)
-        self.assertIs("0123".isnumeric(), True)
-        self.assertIs("xyz".isnumeric(), False)
         self.assertIs(" ".isspace(), True)
-        self.assertIs("\xa0".isspace(), True)
-        self.assertIs("\u3000".isspace(), True)
         self.assertIs("XYZ".isspace(), False)
-        self.assertIs("X".istitle(), True)
-        self.assertIs("x".istitle(), False)
         self.assertIs("XYZ".isupper(), True)
         self.assertIs("xyz".isupper(), False)
         self.assertIs("xyz".startswith("x"), True)
@@ -222,97 +189,18 @@
     def test_boolean(self):
         self.assertEqual(True & 1, 1)
         self.assertNotIsInstance(True & 1, bool)
-        self.assertIs(True & True, True)
 
         self.assertEqual(True | 1, 1)
         self.assertNotIsInstance(True | 1, bool)
-        self.assertIs(True | True, True)
 
         self.assertEqual(True ^ 1, 0)
         self.assertNotIsInstance(True ^ 1, bool)
-        self.assertIs(True ^ True, False)
-
-    def test_fileclosed(self):
-        try:
-            f = open(support.TESTFN, "w")
-            self.assertIs(f.closed, False)
-            f.close()
-            self.assertIs(f.closed, True)
-        finally:
-            os.remove(support.TESTFN)
 
     def test_types(self):
         # types are always true.
         for t in [bool, complex, dict, float, int, list, object,
                   set, str, tuple, type]:
             self.assertIs(bool(t), True)
-
-    def test_operator(self):
-        import operator
-        self.assertIs(operator.truth(0), False)
-        self.assertIs(operator.truth(1), True)
-        self.assertIs(operator.not_(1), False)
-        self.assertIs(operator.not_(0), True)
-        self.assertIs(operator.contains([], 1), False)
-        self.assertIs(operator.contains([1], 1), True)
-        self.assertIs(operator.lt(0, 0), False)
-        self.assertIs(operator.lt(0, 1), True)
-        self.assertIs(operator.is_(True, True), True)
-        self.assertIs(operator.is_(True, False), False)
-        self.assertIs(operator.is_not(True, True), False)
-        self.assertIs(operator.is_not(True, False), True)
-
-    def test_marshal(self):
-        import marshal
-        self.assertIs(marshal.loads(marshal.dumps(True)), True)
-        self.assertIs(marshal.loads(marshal.dumps(False)), False)
-
-    def test_pickle(self):
-        import pickle
-        for proto in range(pickle.HIGHEST_PROTOCOL + 1):
-            self.assertIs(pickle.loads(pickle.dumps(True, proto)), True)
-            self.assertIs(pickle.loads(pickle.dumps(False, proto)), False)
-
-    def test_picklevalues(self):
-        # Test for specific backwards-compatible pickle values
-        import pickle
-        self.assertEqual(pickle.dumps(True, protocol=0), b"I01\n.")
-        self.assertEqual(pickle.dumps(False, protocol=0), b"I00\n.")
-        self.assertEqual(pickle.dumps(True, protocol=1), b"I01\n.")
-        self.assertEqual(pickle.dumps(False, protocol=1), b"I00\n.")
-        self.assertEqual(pickle.dumps(True, protocol=2), b'\x80\x02\x88.')
-        self.assertEqual(pickle.dumps(False, protocol=2), b'\x80\x02\x89.')
-
-    def test_convert_to_bool(self):
-        # Verify that TypeError occurs when bad things are returned
-        # from __bool__().  This isn't really a bool test, but
-        # it's related.
-        check = lambda o: self.assertRaises(TypeError, bool, o)
-        class Foo(object):
-            def __bool__(self):
-                return self
-        check(Foo())
-
-        class Bar(object):
-            def __bool__(self):
-                return "Yes"
-        check(Bar())
-
-        class Baz(int):
-            def __bool__(self):
-                return self
-        check(Baz())
-
-        # __bool__() must return a bool not an int
-        class Spam(int):
-            def __bool__(self):
-                return 1
-        check(Spam())
-
-        class Eggs:
-            def __len__(self):
-                return -1
-        self.assertRaises(ValueError, bool, Eggs())
 
     def test_sane_len(self):
         # this test just tests our assumptions about __len__
@@ -329,18 +217,4 @@
                 except (Exception) as e_len:
                     self.assertEqual(str(e_bool), str(e_len))
 
-    def test_real_and_imag(self):
-        self.assertEqual(True.real, 1)
-        self.assertEqual(True.imag, 0)
-        self.assertIs(type(True.real), int)
-        self.assertIs(type(True.imag), int)
-        self.assertEqual(False.real, 0)
-        self.assertEqual(False.imag, 0)
-        self.assertIs(type(False.real), int)
-        self.assertIs(type(False.imag), int)
-
-def test_main():
-    support.run_unittest(BoolTest)
-
-if __name__ == "__main__":
-    test_main()
+