--- <CPython-3.4.9>/test/test_difflib.py
+++ lib/test/test_difflib.py
@@ -1,7 +1,5 @@
 import difflib
-from test.support import run_unittest, findfile
 import unittest
-import doctest
 import sys
 
 
@@ -93,135 +91,6 @@
         self.assertEqual("+ \t\tI am a bug", diff[2])
         self.assertEqual("? +\n", diff[3])
 
-patch914575_from1 = """
-   1. Beautiful is beTTer than ugly.
-   2. Explicit is better than implicit.
-   3. Simple is better than complex.
-   4. Complex is better than complicated.
-"""
-
-patch914575_to1 = """
-   1. Beautiful is better than ugly.
-   3.   Simple is better than complex.
-   4. Complicated is better than complex.
-   5. Flat is better than nested.
-"""
-
-patch914575_from2 = """
-\t\tLine 1: preceeded by from:[tt] to:[ssss]
-  \t\tLine 2: preceeded by from:[sstt] to:[sssst]
-  \t \tLine 3: preceeded by from:[sstst] to:[ssssss]
-Line 4:  \thas from:[sst] to:[sss] after :
-Line 5: has from:[t] to:[ss] at end\t
-"""
-
-patch914575_to2 = """
-    Line 1: preceeded by from:[tt] to:[ssss]
-    \tLine 2: preceeded by from:[sstt] to:[sssst]
-      Line 3: preceeded by from:[sstst] to:[ssssss]
-Line 4:   has from:[sst] to:[sss] after :
-Line 5: has from:[t] to:[ss] at end
-"""
-
-patch914575_from3 = """line 0
-1234567890123456789012345689012345
-line 1
-line 2
-line 3
-line 4   changed
-line 5   changed
-line 6   changed
-line 7
-line 8  subtracted
-line 9
-1234567890123456789012345689012345
-short line
-just fits in!!
-just fits in two lines yup!!
-the end"""
-
-patch914575_to3 = """line 0
-1234567890123456789012345689012345
-line 1
-line 2    added
-line 3
-line 4   chanGEd
-line 5a  chanGed
-line 6a  changEd
-line 7
-line 8
-line 9
-1234567890
-another long line that needs to be wrapped
-just fitS in!!
-just fits in two lineS yup!!
-the end"""
-
-class TestSFpatches(unittest.TestCase):
-
-    def test_html_diff(self):
-        # Check SF patch 914575 for generating HTML differences
-        f1a = ((patch914575_from1 + '123\n'*10)*3)
-        t1a = (patch914575_to1 + '123\n'*10)*3
-        f1b = '456\n'*10 + f1a
-        t1b = '456\n'*10 + t1a
-        f1a = f1a.splitlines()
-        t1a = t1a.splitlines()
-        f1b = f1b.splitlines()
-        t1b = t1b.splitlines()
-        f2 = patch914575_from2.splitlines()
-        t2 = patch914575_to2.splitlines()
-        f3 = patch914575_from3
-        t3 = patch914575_to3
-        i = difflib.HtmlDiff()
-        j = difflib.HtmlDiff(tabsize=2)
-        k = difflib.HtmlDiff(wrapcolumn=14)
-
-        full = i.make_file(f1a,t1a,'from','to',context=False,numlines=5)
-        tables = '\n'.join(
-            [
-             '<h2>Context (first diff within numlines=5(default))</h2>',
-             i.make_table(f1a,t1a,'from','to',context=True),
-             '<h2>Context (first diff after numlines=5(default))</h2>',
-             i.make_table(f1b,t1b,'from','to',context=True),
-             '<h2>Context (numlines=6)</h2>',
-             i.make_table(f1a,t1a,'from','to',context=True,numlines=6),
-             '<h2>Context (numlines=0)</h2>',
-             i.make_table(f1a,t1a,'from','to',context=True,numlines=0),
-             '<h2>Same Context</h2>',
-             i.make_table(f1a,f1a,'from','to',context=True),
-             '<h2>Same Full</h2>',
-             i.make_table(f1a,f1a,'from','to',context=False),
-             '<h2>Empty Context</h2>',
-             i.make_table([],[],'from','to',context=True),
-             '<h2>Empty Full</h2>',
-             i.make_table([],[],'from','to',context=False),
-             '<h2>tabsize=2</h2>',
-             j.make_table(f2,t2),
-             '<h2>tabsize=default</h2>',
-             i.make_table(f2,t2),
-             '<h2>Context (wrapcolumn=14,numlines=0)</h2>',
-             k.make_table(f3.splitlines(),t3.splitlines(),context=True,numlines=0),
-             '<h2>wrapcolumn=14,splitlines()</h2>',
-             k.make_table(f3.splitlines(),t3.splitlines()),
-             '<h2>wrapcolumn=14,splitlines(True)</h2>',
-             k.make_table(f3.splitlines(True),t3.splitlines(True)),
-             ])
-        actual = full.replace('</body>','\n%s\n</body>' % tables)
-
-        # temporarily uncomment next two lines to baseline this test
-        #with open('test_difflib_expect.html','w') as fp:
-        #    fp.write(actual)
-
-        with open(findfile('test_difflib_expect.html')) as fp:
-            self.assertEqual(actual, fp.read())
-
-    def test_recursion_limit(self):
-        # Check if the problem described in patch #1413711 exists.
-        limit = sys.getrecursionlimit()
-        old = [(i%2 and "K:%d" or "V:A:%d") % i for i in range(limit*2)]
-        new = [(i%2 and "K:%d" or "V:B:%d") % i for i in range(limit*2)]
-        difflib.SequenceMatcher(None, old, new).get_opcodes()
 
 
 class TestOutputFormat(unittest.TestCase):
@@ -295,9 +164,6 @@
         for line in ['##', ' ##', '## ', 'abc ', 'abc #', 'Mr. Moose is up!']:
             self.assertFalse(difflib.IS_LINE_JUNK(line), repr(line))
 
-    def test_is_line_junk_REDOS(self):
-        evil_input = ('\t' * 1000000) + '##'
-        self.assertFalse(difflib.IS_LINE_JUNK(evil_input))
 
     def test_is_character_junk_true(self):
         for char in [' ', '\t']:
@@ -307,12 +173,4 @@
         for char in ['a', '#', '\n', '\f', '\r', '\v']:
             self.assertFalse(difflib.IS_CHARACTER_JUNK(char), repr(char))
 
-def test_main():
-    difflib.HtmlDiff._default_prefix = 0
-    Doctests = doctest.DocTestSuite(difflib)
-    run_unittest(
-        TestWithAscii, TestAutojunk, TestSFpatches, TestSFbugs,
-        TestOutputFormat, TestJunkAPIs, Doctests)
-
-if __name__ == '__main__':
-    test_main()
+