--- <CPython-3.4.9>/test/test_int.py
+++ lib/test/test_int.py
@@ -1,7 +1,6 @@
 import sys
 
 import unittest
-from test import support
 
 L = [
         ('0', 0),
@@ -40,7 +39,6 @@
         self.assertEqual(int(-3.5), -3)
         self.assertEqual(int("-3"), -3)
         self.assertEqual(int(" -3 "), -3)
-        self.assertEqual(int("\N{EM SPACE}-3\N{EN SPACE}"), -3)
         # Different base:
         self.assertEqual(int("10",16), 16)
         # Test conversion from strings and various anomalies
@@ -64,9 +62,9 @@
         self.assertEqual(int(s[1:]), sys.maxsize+1)
 
         # should return int
-        x = int(1e100)
+        x = int(1e30)                                                           ###
         self.assertIsInstance(x, int)
-        x = int(-1e100)
+        x = int(-1e30)                                                          ###
         self.assertIsInstance(x, int)
 
 
@@ -212,7 +210,6 @@
         self.assertEqual(int('2br45qc', 35), 4294967297)
         self.assertEqual(int('1z141z5', 36), 4294967297)
 
-    @support.cpython_only
     def test_small_ints(self):
         # Bug #3236: Return small longs from PyLong_FromString
         self.assertIs(int('10'), 10)
@@ -222,14 +219,6 @@
 
     def test_no_args(self):
         self.assertEqual(int(), 0)
-
-    def test_keyword_args(self):
-        # Test invoking int() using keyword arguments.
-        self.assertEqual(int(x=1.2), 1)
-        self.assertEqual(int('100', base=2), 4)
-        self.assertEqual(int(x='100', base=2), 4)
-        self.assertRaises(TypeError, int, base=10)
-        self.assertRaises(TypeError, int, base=0)
 
     def test_int_base_limits(self):
         """Testing the supported limits of the int() base parameter."""
@@ -240,13 +229,9 @@
             int('0', 37)
         with self.assertRaises(ValueError):
             int('0', -909)  # An old magic value base from Python 2.
-        with self.assertRaises(ValueError):
-            int('0', base=0-(2**234))
-        with self.assertRaises(ValueError):
-            int('0', base=2**234)
         # Bases 2 through 36 are supported.
         for base in range(2,37):
-            self.assertEqual(int('0', base=base), 0)
+            self.assertEqual(int('0', base), 0)                                 ###
 
     def test_int_base_bad_types(self):
         """Not integer types are not valid bases; issue16772."""
@@ -256,47 +241,22 @@
             int('0', 5.0)
 
     def test_int_base_indexable(self):
-        class MyIndexable(object):
-            def __init__(self, value):
-                self.value = value
-            def __index__(self):
-                return self.value
-
         # Check out of range bases.
-        for base in 2**100, -2**100, 1, 37:
+        for base in 1, 37:                                                      ###
             with self.assertRaises(ValueError):
                 int('43', base)
-
-        # Check in-range bases.
-        self.assertEqual(int('101', base=MyIndexable(2)), 5)
-        self.assertEqual(int('101', base=MyIndexable(10)), 101)
-        self.assertEqual(int('101', base=MyIndexable(36)), 1 + 36**2)
 
     def test_non_numeric_input_types(self):
         # Test possible non-numeric types for the argument x, including
         # subclasses of the explicitly documented accepted types.
-        class CustomStr(str): pass
-        class CustomBytes(bytes): pass
-        class CustomByteArray(bytearray): pass
 
         factories = [
             bytes,
-            bytearray,
-            lambda b: CustomStr(b.decode()),
-            CustomBytes,
-            CustomByteArray,
-            memoryview,
         ]
-        try:
-            from array import array
-        except ImportError:
-            pass
-        else:
-            factories.append(lambda b: array('B', b))
 
         for f in factories:
             x = f(b'100')
-            with self.subTest(type(x)):
+            if True:                                                            ###
                 self.assertEqual(int(x), 100)
                 if isinstance(x, (str, bytes, bytearray)):
                     self.assertEqual(int(x, 2), 4)
@@ -304,150 +264,11 @@
                     msg = "can't convert non-string"
                     with self.assertRaisesRegex(TypeError, msg):
                         int(x, 2)
-                with self.assertRaisesRegex(ValueError, 'invalid literal'):
+                with self.assertRaisesRegex(ValueError, 'invalid'):             ###
                     int(f(b'A' * 0x10))
-
-    def test_int_memoryview(self):
-        self.assertEqual(int(memoryview(b'123')[1:3]), 23)
-        self.assertEqual(int(memoryview(b'123\x00')[1:3]), 23)
-        self.assertEqual(int(memoryview(b'123 ')[1:3]), 23)
-        self.assertEqual(int(memoryview(b'123A')[1:3]), 23)
-        self.assertEqual(int(memoryview(b'1234')[1:3]), 23)
 
     def test_string_float(self):
         self.assertRaises(ValueError, int, '1.2')
-
-    def test_intconversion(self):
-        # Test __int__()
-        class ClassicMissingMethods:
-            pass
-        self.assertRaises(TypeError, int, ClassicMissingMethods())
-
-        class MissingMethods(object):
-            pass
-        self.assertRaises(TypeError, int, MissingMethods())
-
-        class Foo0:
-            def __int__(self):
-                return 42
-
-        self.assertEqual(int(Foo0()), 42)
-
-        class Classic:
-            pass
-        for base in (object, Classic):
-            class IntOverridesTrunc(base):
-                def __int__(self):
-                    return 42
-                def __trunc__(self):
-                    return -12
-            self.assertEqual(int(IntOverridesTrunc()), 42)
-
-            class JustTrunc(base):
-                def __trunc__(self):
-                    return 42
-            self.assertEqual(int(JustTrunc()), 42)
-
-            class ExceptionalTrunc(base):
-                def __trunc__(self):
-                    1 / 0
-            with self.assertRaises(ZeroDivisionError):
-                int(ExceptionalTrunc())
-
-            for trunc_result_base in (object, Classic):
-                class Integral(trunc_result_base):
-                    def __int__(self):
-                        return 42
-
-                class TruncReturnsNonInt(base):
-                    def __trunc__(self):
-                        return Integral()
-                self.assertEqual(int(TruncReturnsNonInt()), 42)
-
-                class NonIntegral(trunc_result_base):
-                    def __trunc__(self):
-                        # Check that we avoid infinite recursion.
-                        return NonIntegral()
-
-                class TruncReturnsNonIntegral(base):
-                    def __trunc__(self):
-                        return NonIntegral()
-                try:
-                    int(TruncReturnsNonIntegral())
-                except TypeError as e:
-                    self.assertEqual(str(e),
-                                      "__trunc__ returned non-Integral"
-                                      " (type NonIntegral)")
-                else:
-                    self.fail("Failed to raise TypeError with %s" %
-                              ((base, trunc_result_base),))
-
-                # Regression test for bugs.python.org/issue16060.
-                class BadInt(trunc_result_base):
-                    def __int__(self):
-                        return 42.0
-
-                class TruncReturnsBadInt(base):
-                    def __trunc__(self):
-                        return BadInt()
-
-                with self.assertRaises(TypeError):
-                    int(TruncReturnsBadInt())
-
-    def test_int_subclass_with_int(self):
-        class MyInt(int):
-            def __int__(self):
-                return 42
-
-        class BadInt(int):
-            def __int__(self):
-                return 42.0
-
-        my_int = MyInt(7)
-        self.assertEqual(my_int, 7)
-        self.assertEqual(int(my_int), 42)
-
-        self.assertRaises(TypeError, int, BadInt())
-
-    def test_int_returns_int_subclass(self):
-        class BadInt:
-            def __int__(self):
-                return True
-
-        class BadInt2(int):
-            def __int__(self):
-                return True
-
-        class TruncReturnsBadInt:
-            def __trunc__(self):
-                return BadInt()
-
-        class TruncReturnsIntSubclass:
-            def __trunc__(self):
-                return True
-
-        bad_int = BadInt()
-        with self.assertWarns(DeprecationWarning):
-            n = int(bad_int)
-        self.assertEqual(n, 1)
-
-        bad_int = BadInt2()
-        with self.assertWarns(DeprecationWarning):
-            n = int(bad_int)
-        self.assertEqual(n, 1)
-
-        bad_int = TruncReturnsBadInt()
-        with self.assertWarns(DeprecationWarning):
-            n = int(bad_int)
-        self.assertEqual(n, 1)
-
-        good_int = TruncReturnsIntSubclass()
-        n = int(good_int)
-        self.assertEqual(n, 1)
-        self.assertIs(type(n), bool)
-        n = IntSubclass(good_int)
-        self.assertEqual(n, 1)
-        self.assertIs(type(n), IntSubclass)
 
     def test_error_message(self):
         def check(s, base=None):
@@ -458,8 +279,8 @@
                 else:
                     int(s, base)
             self.assertEqual(cm.exception.args[0],
-                "invalid literal for int() with base %d: %r" %
-                (10 if base is None else base, s))
+                "invalid syntax for integer with base %d" %                     ###
+                (10 if base is None else base,))                                ###
 
         check('\xbd')
         check('123\xbd')
@@ -482,8 +303,4 @@
         check('123\ud800')
         check('123\ud800', 10)
 
-def test_main():
-    support.run_unittest(IntTestCases)
-
-if __name__ == "__main__":
-    test_main()
+