--- <CPython-3.4.9>/test/test_binop.py
+++ lib/test/test_binop.py
@@ -1,9 +1,7 @@
 """Tests for binary operators on subtypes of built-in types."""
 
 import unittest
-from test import support
 from operator import eq, ne, lt, gt, le, ge
-from abc import ABCMeta
 
 def gcd(a, b):
     """Greatest common divisor using Euclid's algorithm."""
@@ -253,29 +251,22 @@
         self.assertEqual(Rat(2, 3) + Rat(1, 3), 1)
         self.assertEqual(Rat(2, 3) + 1, Rat(5, 3))
         self.assertEqual(1 + Rat(2, 3), Rat(5, 3))
-        self.assertEqual(1.0 + Rat(1, 2), 1.5)
-        self.assertEqual(Rat(1, 2) + 1.0, 1.5)
+# TypeError: can't convert Rat to float                                         ###
 
     def test_sub(self):
         self.assertEqual(Rat(7, 2) - Rat(7, 5), Rat(21, 10))
         self.assertEqual(Rat(7, 5) - 1, Rat(2, 5))
         self.assertEqual(1 - Rat(3, 5), Rat(2, 5))
-        self.assertEqual(Rat(3, 2) - 1.0, 0.5)
-        self.assertEqual(1.0 - Rat(1, 2), 0.5)
 
     def test_mul(self):
         self.assertEqual(Rat(2, 3) * Rat(5, 7), Rat(10, 21))
         self.assertEqual(Rat(10, 3) * 3, 10)
         self.assertEqual(3 * Rat(10, 3), 10)
-        self.assertEqual(Rat(10, 5) * 0.5, 1.0)
-        self.assertEqual(0.5 * Rat(10, 5), 1.0)
 
     def test_div(self):
         self.assertEqual(Rat(10, 3) / Rat(5, 7), Rat(14, 3))
         self.assertEqual(Rat(10, 3) / 3, Rat(10, 9))
         self.assertEqual(2 / Rat(5), Rat(2, 5))
-        self.assertEqual(3.0 * Rat(1, 2), 1.5)
-        self.assertEqual(Rat(1, 2) * 3.0, 1.5)
 
     def test_floordiv(self):
         self.assertEqual(Rat(10) // Rat(4), 2)
@@ -287,111 +278,14 @@
         self.assertEqual(Rat(10), Rat(20, 2))
         self.assertEqual(Rat(10), 10)
         self.assertEqual(10, Rat(10))
-        self.assertEqual(Rat(10), 10.0)
-        self.assertEqual(10.0, Rat(10))
 
     def test_true_div(self):
         self.assertEqual(Rat(10, 3) / Rat(5, 7), Rat(14, 3))
         self.assertEqual(Rat(10, 3) / 3, Rat(10, 9))
         self.assertEqual(2 / Rat(5), Rat(2, 5))
-        self.assertEqual(3.0 * Rat(1, 2), 1.5)
-        self.assertEqual(Rat(1, 2) * 3.0, 1.5)
         self.assertEqual(eval('1/2'), 0.5)
 
     # XXX Ran out of steam; TO DO: divmod, div, future division
 
 
-class OperationLogger:
-    """Base class for classes with operation logging."""
-    def __init__(self, logger):
-        self.logger = logger
-    def log_operation(self, *args):
-        self.logger(*args)
-
-def op_sequence(op, *classes):
-    """Return the sequence of operations that results from applying
-    the operation `op` to instances of the given classes."""
-    log = []
-    instances = []
-    for c in classes:
-        instances.append(c(log.append))
-
-    try:
-        op(*instances)
-    except TypeError:
-        pass
-    return log
-
-class A(OperationLogger):
-    def __eq__(self, other):
-        self.log_operation('A.__eq__')
-        return NotImplemented
-    def __le__(self, other):
-        self.log_operation('A.__le__')
-        return NotImplemented
-    def __ge__(self, other):
-        self.log_operation('A.__ge__')
-        return NotImplemented
-
-class B(OperationLogger, metaclass=ABCMeta):
-    def __eq__(self, other):
-        self.log_operation('B.__eq__')
-        return NotImplemented
-    def __le__(self, other):
-        self.log_operation('B.__le__')
-        return NotImplemented
-    def __ge__(self, other):
-        self.log_operation('B.__ge__')
-        return NotImplemented
-
-class C(B):
-    def __eq__(self, other):
-        self.log_operation('C.__eq__')
-        return NotImplemented
-    def __le__(self, other):
-        self.log_operation('C.__le__')
-        return NotImplemented
-    def __ge__(self, other):
-        self.log_operation('C.__ge__')
-        return NotImplemented
-
-class V(OperationLogger):
-    """Virtual subclass of B"""
-    def __eq__(self, other):
-        self.log_operation('V.__eq__')
-        return NotImplemented
-    def __le__(self, other):
-        self.log_operation('V.__le__')
-        return NotImplemented
-    def __ge__(self, other):
-        self.log_operation('V.__ge__')
-        return NotImplemented
-B.register(V)
-
-
-class OperationOrderTests(unittest.TestCase):
-    def test_comparison_orders(self):
-        self.assertEqual(op_sequence(eq, A, A), ['A.__eq__', 'A.__eq__'])
-        self.assertEqual(op_sequence(eq, A, B), ['A.__eq__', 'B.__eq__'])
-        self.assertEqual(op_sequence(eq, B, A), ['B.__eq__', 'A.__eq__'])
-        # C is a subclass of B, so C.__eq__ is called first
-        self.assertEqual(op_sequence(eq, B, C), ['C.__eq__', 'B.__eq__'])
-        self.assertEqual(op_sequence(eq, C, B), ['C.__eq__', 'B.__eq__'])
-
-        self.assertEqual(op_sequence(le, A, A), ['A.__le__', 'A.__ge__'])
-        self.assertEqual(op_sequence(le, A, B), ['A.__le__', 'B.__ge__'])
-        self.assertEqual(op_sequence(le, B, A), ['B.__le__', 'A.__ge__'])
-        self.assertEqual(op_sequence(le, B, C), ['C.__ge__', 'B.__le__'])
-        self.assertEqual(op_sequence(le, C, B), ['C.__le__', 'B.__ge__'])
-
-        self.assertTrue(issubclass(V, B))
-        self.assertEqual(op_sequence(eq, B, V), ['B.__eq__', 'V.__eq__'])
-        self.assertEqual(op_sequence(le, B, V), ['B.__le__', 'V.__ge__'])
-
-
-def test_main():
-    support.run_unittest(RatTestCase, OperationOrderTests)
-
-
-if __name__ == "__main__":
-    test_main()
+