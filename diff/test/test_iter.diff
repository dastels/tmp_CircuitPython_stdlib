--- <CPython-3.4.9>/test/test_iter.py
+++ lib/test/test_iter.py
@@ -1,10 +1,7 @@
 # Test iterators.
 
-import sys
 import unittest
-from test.support import run_unittest, TESTFN, unlink, cpython_only
-import pickle
-import collections.abc
+from test.support import TESTFN, unlink                                         ###
 
 # Test result of triple loop (too big to inline)
 TRIPLETS = [(0, 0, 0), (0, 0, 1), (0, 0, 2),
@@ -59,8 +56,6 @@
 
     # Helper to check that an iterator returns a given sequence
     def check_iterator(self, it, seq, pickle=True):
-        if pickle:
-            self.check_pickle(it, seq)
         res = []
         while 1:
             try:
@@ -72,32 +67,10 @@
 
     # Helper to check that a for loop generates a given sequence
     def check_for_loop(self, expr, seq, pickle=True):
-        if pickle:
-            self.check_pickle(iter(expr), seq)
         res = []
         for val in expr:
             res.append(val)
         self.assertEqual(res, seq)
-
-    # Helper to check picklability
-    def check_pickle(self, itorg, seq):
-        for proto in range(pickle.HIGHEST_PROTOCOL + 1):
-            d = pickle.dumps(itorg, proto)
-            it = pickle.loads(d)
-            # Cannot assert type equality because dict iterators unpickle as list
-            # iterators.
-            # self.assertEqual(type(itorg), type(it))
-            self.assertTrue(isinstance(it, collections.abc.Iterator))
-            self.assertEqual(list(it), seq)
-
-            it = pickle.loads(d)
-            try:
-                next(it)
-            except StopIteration:
-                continue
-            d = pickle.dumps(it, proto)
-            it = pickle.loads(d)
-            self.assertEqual(list(it), seq[1:])
 
     # Test basic use of iter() function
     def test_iter_basic(self):
@@ -153,61 +126,6 @@
     def test_seq_class_iter(self):
         self.check_iterator(iter(SequenceClass(10)), list(range(10)))
 
-    # Test a new_style class with __iter__ but no next() method
-    def test_new_style_iter_class(self):
-        class IterClass(object):
-            def __iter__(self):
-                return self
-        self.assertRaises(TypeError, iter, IterClass())
-
-    # Test two-argument iter() with callable instance
-    def test_iter_callable(self):
-        class C:
-            def __init__(self):
-                self.i = 0
-            def __call__(self):
-                i = self.i
-                self.i = i + 1
-                if i > 100:
-                    raise IndexError # Emergency stop
-                return i
-        self.check_iterator(iter(C(), 10), list(range(10)), pickle=False)
-
-    # Test two-argument iter() with function
-    def test_iter_function(self):
-        def spam(state=[0]):
-            i = state[0]
-            state[0] = i+1
-            return i
-        self.check_iterator(iter(spam, 10), list(range(10)), pickle=False)
-
-    # Test two-argument iter() with function that raises StopIteration
-    def test_iter_function_stop(self):
-        def spam(state=[0]):
-            i = state[0]
-            if i == 10:
-                raise StopIteration
-            state[0] = i+1
-            return i
-        self.check_iterator(iter(spam, 20), list(range(10)), pickle=False)
-
-    # Test exception propagation through function iterator
-    def test_exception_function(self):
-        def spam(state=[0]):
-            i = state[0]
-            state[0] = i+1
-            if i == 10:
-                raise RuntimeError
-            return i
-        res = []
-        try:
-            for x in iter(spam, 20):
-                res.append(x)
-        except RuntimeError:
-            self.assertEqual(res, list(range(10)))
-        else:
-            self.fail("should have raised RuntimeError")
-
     # Test exception propagation through sequence iterator
     def test_exception_sequence(self):
         class MySequenceClass(SequenceClass):
@@ -232,10 +150,6 @@
                     raise StopIteration
                 return SequenceClass.__getitem__(self, i)
         self.check_for_loop(MySequenceClass(20), list(range(10)), pickle=False)
-
-    # Test a big range
-    def test_iter_big_range(self):
-        self.check_for_loop(iter(range(10000)), list(range(10000)))
 
     # Test an empty list
     def test_iter_empty(self):
@@ -688,59 +602,6 @@
             self.assertEqual(indexOf(iclass, i), i)
         self.assertRaises(ValueError, indexOf, iclass, -1)
 
-    # Test iterators with file.writelines().
-    def test_writelines(self):
-        f = open(TESTFN, "w")
-
-        try:
-            self.assertRaises(TypeError, f.writelines, None)
-            self.assertRaises(TypeError, f.writelines, 42)
-
-            f.writelines(["1\n", "2\n"])
-            f.writelines(("3\n", "4\n"))
-            f.writelines({'5\n': None})
-            f.writelines({})
-
-            # Try a big chunk too.
-            class Iterator:
-                def __init__(self, start, finish):
-                    self.start = start
-                    self.finish = finish
-                    self.i = self.start
-
-                def __next__(self):
-                    if self.i >= self.finish:
-                        raise StopIteration
-                    result = str(self.i) + '\n'
-                    self.i += 1
-                    return result
-
-                def __iter__(self):
-                    return self
-
-            class Whatever:
-                def __init__(self, start, finish):
-                    self.start = start
-                    self.finish = finish
-
-                def __iter__(self):
-                    return Iterator(self.start, self.finish)
-
-            f.writelines(Whatever(6, 6+2000))
-            f.close()
-
-            f = open(TESTFN)
-            expected = [str(i) + "\n" for i in range(1, 2006)]
-            self.assertEqual(list(f), expected)
-
-        finally:
-            f.close()
-            try:
-                unlink(TESTFN)
-            except OSError:
-                pass
-
-
     # Test iterators on RHS of unpacking assignments.
     def test_unpack_iter(self):
         a, b = 1, 2
@@ -795,42 +656,9 @@
         self.assertEqual((a, b, c), (0, 1, 42))
 
 
-    @cpython_only
-    def test_ref_counting_behavior(self):
-        class C(object):
-            count = 0
-            def __new__(cls):
-                cls.count += 1
-                return object.__new__(cls)
-            def __del__(self):
-                cls = self.__class__
-                assert cls.count > 0
-                cls.count -= 1
-        x = C()
-        self.assertEqual(C.count, 1)
-        del x
-        self.assertEqual(C.count, 0)
-        l = [C(), C(), C()]
-        self.assertEqual(C.count, 3)
-        try:
-            a, b = iter(l)
-        except ValueError:
-            pass
-        del l
-        self.assertEqual(C.count, 0)
-
-
     # Make sure StopIteration is a "sink state".
     # This tests various things that weren't sink states in Python 2.2.1,
     # plus various things that always were fine.
-
-    def test_sinkstate_list(self):
-        # This used to fail
-        a = list(range(5))
-        b = iter(a)
-        self.assertEqual(list(b), list(range(5)))
-        a.extend(range(5, 10))
-        self.assertEqual(list(b), [])
 
     def test_sinkstate_tuple(self):
         a = (0, 1, 2, 3, 4)
@@ -842,26 +670,6 @@
         a = "abcde"
         b = iter(a)
         self.assertEqual(list(b), ['a', 'b', 'c', 'd', 'e'])
-        self.assertEqual(list(b), [])
-
-    def test_sinkstate_sequence(self):
-        # This used to fail
-        a = SequenceClass(5)
-        b = iter(a)
-        self.assertEqual(list(b), list(range(5)))
-        a.n = 10
-        self.assertEqual(list(b), [])
-
-    def test_sinkstate_callable(self):
-        # This used to fail
-        def spam(state=[0]):
-            i = state[0]
-            state[0] = i+1
-            if i == 10:
-                raise AssertionError("shouldn't have gotten this far")
-            return i
-        b = iter(spam, 5)
-        self.assertEqual(list(b), list(range(5)))
         self.assertEqual(list(b), [])
 
     def test_sinkstate_dict(self):
@@ -924,30 +732,5 @@
         lst.extend(gen())
         self.assertEqual(len(lst), 760)
 
-    @cpython_only
-    def test_iter_overflow(self):
-        # Test for the issue 22939
-        it = iter(UnlimitedSequenceClass())
-        # Manually set `it_index` to PY_SSIZE_T_MAX-2 without a loop
-        it.__setstate__(sys.maxsize - 2)
-        self.assertEqual(next(it), sys.maxsize - 2)
-        self.assertEqual(next(it), sys.maxsize - 1)
-        with self.assertRaises(OverflowError):
-            next(it)
-        # Check that Overflow error is always raised
-        with self.assertRaises(OverflowError):
-            next(it)
-
-    def test_iter_neg_setstate(self):
-        it = iter(UnlimitedSequenceClass())
-        it.__setstate__(-42)
-        self.assertEqual(next(it), 0)
-        self.assertEqual(next(it), 1)
-
-
-def test_main():
-    run_unittest(TestCase)
-
-
-if __name__ == "__main__":
-    test_main()
+
+