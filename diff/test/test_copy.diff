--- <CPython-3.4.9>/test/test_copy.py
+++ lib/test/test_copy.py
@@ -1,17 +1,10 @@
 """Unit tests for the copy module."""
 
 import copy
-import copyreg
-import weakref
-import abc
-from operator import le, lt, ge, gt, eq, ne
 
 import unittest
 from test import support
 
-order_comparisons = le, lt, ge, gt
-equality_comparisons = eq, ne
-comparisons = order_comparisons + equality_comparisons
 
 class TestCopy(unittest.TestCase):
 
@@ -39,19 +32,6 @@
         self.assertEqual(y.__class__, x.__class__)
         self.assertEqual(y.foo, x.foo)
 
-    def test_copy_registry(self):
-        class C(object):
-            def __new__(cls, foo):
-                obj = object.__new__(cls)
-                obj.foo = foo
-                return obj
-        def pickle_C(obj):
-            return (C, (obj.foo,))
-        x = C(42)
-        self.assertRaises(TypeError, copy.copy, x)
-        copyreg.pickle(C, pickle_C, C)
-        y = copy.copy(x)
-
     def test_copy_reduce_ex(self):
         class C(object):
             def __reduce_ex__(self, proto):
@@ -76,15 +56,6 @@
         self.assertIs(y, x)
         self.assertEqual(c, [1])
 
-    def test_copy_cant(self):
-        class C(object):
-            def __getattribute__(self, name):
-                if name.startswith("__reduce"):
-                    raise AttributeError(name)
-                return object.__getattribute__(self, name)
-        x = C()
-        self.assertRaises(copy.Error, copy.copy, x)
-
     # Type-specific _copy_xxx() methods
 
     def test_copy_atomic(self):
@@ -94,12 +65,10 @@
             pass
         def f():
             pass
-        class WithMetaclass(metaclass=abc.ABCMeta):
-            pass
         tests = [None, 42, 2**100, 3.14, True, False, 1j,
-                 "hello", "hello\u1234", f.__code__,
+                 "hello", "hello\u1234",                                        ###
                  b"world", bytes(range(256)),
-                 NewStyle, range(10), Classic, max, WithMetaclass]
+                 NewStyle, range(10), Classic]                                  ###
         for x in tests:
             self.assertIs(copy.copy(x), x)
 
@@ -130,17 +99,6 @@
                 self.foo = foo
             def __copy__(self):
                 return C(self.foo)
-            def __eq__(self, other):
-                return self.foo == other.foo
-        x = C(42)
-        self.assertEqual(copy.copy(x), x)
-
-    def test_copy_inst_getinitargs(self):
-        class C:
-            def __init__(self, foo):
-                self.foo = foo
-            def __getinitargs__(self):
-                return (self.foo,)
             def __eq__(self, other):
                 return self.foo == other.foo
         x = C(42)
@@ -179,9 +137,6 @@
             def __eq__(self, other):
                 return self.foo == other.foo
         x = C(42)
-        self.assertEqual(copy.copy(x), x)
-        # State with boolean value is false (issue #25718)
-        x = C(0.0)
         self.assertEqual(copy.copy(x), x)
 
     # The deepcopy() method
@@ -202,17 +157,6 @@
         self.assertIsNot(y[0], x[0])
         self.assertIs(y[0], y[1])
 
-    def test_deepcopy_issubclass(self):
-        # XXX Note: there's no way to test the TypeError coming out of
-        # issubclass() -- this can only happen when an extension
-        # module defines a "type" that doesn't formally inherit from
-        # type.
-        class Meta(type):
-            pass
-        class C(metaclass=Meta):
-            pass
-        self.assertEqual(copy.deepcopy(C), C)
-
     def test_deepcopy_deepcopy(self):
         class C(object):
             def __init__(self, foo):
@@ -223,19 +167,6 @@
         y = copy.deepcopy(x)
         self.assertEqual(y.__class__, x.__class__)
         self.assertEqual(y.foo, x.foo)
-
-    def test_deepcopy_registry(self):
-        class C(object):
-            def __new__(cls, foo):
-                obj = object.__new__(cls)
-                obj.foo = foo
-                return obj
-        def pickle_C(obj):
-            return (C, (obj.foo,))
-        x = C(42)
-        self.assertRaises(TypeError, copy.deepcopy, x)
-        copyreg.pickle(C, pickle_C, C)
-        y = copy.deepcopy(x)
 
     def test_deepcopy_reduce_ex(self):
         class C(object):
@@ -261,15 +192,6 @@
         self.assertIs(y, x)
         self.assertEqual(c, [1])
 
-    def test_deepcopy_cant(self):
-        class C(object):
-            def __getattribute__(self, name):
-                if name.startswith("__reduce"):
-                    raise AttributeError(name)
-                return object.__getattribute__(self, name)
-        x = C()
-        self.assertRaises(copy.Error, copy.deepcopy, x)
-
     # Type-specific _deepcopy_xxx() methods
 
     def test_deepcopy_atomic(self):
@@ -280,8 +202,8 @@
         def f():
             pass
         tests = [None, 42, 2**100, 3.14, True, False, 1j,
-                 "hello", "hello\u1234", f.__code__,
-                 NewStyle, range(10), Classic, max]
+                 "hello", "hello\u1234",                                        ###
+                 NewStyle, range(10), Classic]                                  ###
         for x in tests:
             self.assertIs(copy.deepcopy(x), x)
 
@@ -296,8 +218,6 @@
         x = []
         x.append(x)
         y = copy.deepcopy(x)
-        for op in comparisons:
-            self.assertRaises(RuntimeError, op, y, x)
         self.assertIsNot(y, x)
         self.assertIs(y[0], y)
         self.assertEqual(len(y), 1)
@@ -323,8 +243,6 @@
         x = ([],)
         x[0].append(x)
         y = copy.deepcopy(x)
-        for op in comparisons:
-            self.assertRaises(RuntimeError, op, y, x)
         self.assertIsNot(y, x)
         self.assertIsNot(y[0], x[0])
         self.assertIs(y[0][0], y)
@@ -340,10 +258,6 @@
         x = {}
         x['foo'] = x
         y = copy.deepcopy(x)
-        for op in order_comparisons:
-            self.assertRaises(TypeError, op, y, x)
-        for op in equality_comparisons:
-            self.assertRaises(RuntimeError, op, y, x)
         self.assertIsNot(y, x)
         self.assertIs(y['foo'], y)
         self.assertEqual(len(y), 1)
@@ -394,20 +308,6 @@
         self.assertIsNot(y, x)
         self.assertIsNot(y.foo, x.foo)
 
-    def test_deepcopy_inst_getinitargs(self):
-        class C:
-            def __init__(self, foo):
-                self.foo = foo
-            def __getinitargs__(self):
-                return (self.foo,)
-            def __eq__(self, other):
-                return self.foo == other.foo
-        x = C([42])
-        y = copy.deepcopy(x)
-        self.assertEqual(y, x)
-        self.assertIsNot(y, x)
-        self.assertIsNot(y.foo, x.foo)
-
     def test_deepcopy_inst_getstate(self):
         class C:
             def __init__(self, foo):
@@ -451,12 +351,6 @@
         self.assertEqual(y, x)
         self.assertIsNot(y, x)
         self.assertIsNot(y.foo, x.foo)
-        # State with boolean value is false (issue #25718)
-        x = C([])
-        y = copy.deepcopy(x)
-        self.assertEqual(y, x)
-        self.assertIsNot(y, x)
-        self.assertIsNot(y.foo, x.foo)
 
     def test_deepcopy_reflexive_inst(self):
         class C:
@@ -494,22 +388,6 @@
         class C(object):
             def __reduce__(self):
                 return (C, (), self.__dict__)
-            def __eq__(self, other):
-                return self.__dict__ == other.__dict__
-        x = C()
-        x.foo = [42]
-        y = copy.copy(x)
-        self.assertEqual(y, x)
-        y = copy.deepcopy(x)
-        self.assertEqual(y, x)
-        self.assertIsNot(y.foo, x.foo)
-
-    def test_reconstruct_state_setstate(self):
-        class C(object):
-            def __reduce__(self):
-                return (C, (), self.__dict__)
-            def __setstate__(self, state):
-                self.__dict__.update(state)
             def __eq__(self, other):
                 return self.__dict__ == other.__dict__
         x = C()
@@ -545,100 +423,6 @@
         self.assertIs(x[0], y[0])
         y = copy.deepcopy(x)
         self.assertEqual(x, y)
-        self.assertIsNot(x, y)
-        self.assertIsNot(x[0], y[0])
-
-    def test_reduce_5tuple(self):
-        class C(dict):
-            def __reduce__(self):
-                return (C, (), self.__dict__, None, self.items())
-            def __eq__(self, other):
-                return (dict(self) == dict(other) and
-                        self.__dict__ == other.__dict__)
-        x = C([("foo", [1, 2]), ("bar", 3)])
-        y = copy.copy(x)
-        self.assertEqual(x, y)
-        self.assertIsNot(x, y)
-        self.assertIs(x["foo"], y["foo"])
-        y = copy.deepcopy(x)
-        self.assertEqual(x, y)
-        self.assertIsNot(x, y)
-        self.assertIsNot(x["foo"], y["foo"])
-
-    def test_copy_slots(self):
-        class C(object):
-            __slots__ = ["foo"]
-        x = C()
-        x.foo = [42]
-        y = copy.copy(x)
-        self.assertIs(x.foo, y.foo)
-
-    def test_deepcopy_slots(self):
-        class C(object):
-            __slots__ = ["foo"]
-        x = C()
-        x.foo = [42]
-        y = copy.deepcopy(x)
-        self.assertEqual(x.foo, y.foo)
-        self.assertIsNot(x.foo, y.foo)
-
-    def test_deepcopy_dict_subclass(self):
-        class C(dict):
-            def __init__(self, d=None):
-                if not d:
-                    d = {}
-                self._keys = list(d.keys())
-                super().__init__(d)
-            def __setitem__(self, key, item):
-                super().__setitem__(key, item)
-                if key not in self._keys:
-                    self._keys.append(key)
-        x = C(d={'foo':0})
-        y = copy.deepcopy(x)
-        self.assertEqual(x, y)
-        self.assertEqual(x._keys, y._keys)
-        self.assertIsNot(x, y)
-        x['bar'] = 1
-        self.assertNotEqual(x, y)
-        self.assertNotEqual(x._keys, y._keys)
-
-    def test_copy_list_subclass(self):
-        class C(list):
-            pass
-        x = C([[1, 2], 3])
-        x.foo = [4, 5]
-        y = copy.copy(x)
-        self.assertEqual(list(x), list(y))
-        self.assertEqual(x.foo, y.foo)
-        self.assertIs(x[0], y[0])
-        self.assertIs(x.foo, y.foo)
-
-    def test_deepcopy_list_subclass(self):
-        class C(list):
-            pass
-        x = C([[1, 2], 3])
-        x.foo = [4, 5]
-        y = copy.deepcopy(x)
-        self.assertEqual(list(x), list(y))
-        self.assertEqual(x.foo, y.foo)
-        self.assertIsNot(x[0], y[0])
-        self.assertIsNot(x.foo, y.foo)
-
-    def test_copy_tuple_subclass(self):
-        class C(tuple):
-            pass
-        x = C([1, 2, 3])
-        self.assertEqual(tuple(x), (1, 2, 3))
-        y = copy.copy(x)
-        self.assertEqual(tuple(y), (1, 2, 3))
-
-    def test_deepcopy_tuple_subclass(self):
-        class C(tuple):
-            pass
-        x = C([[1, 2], 3])
-        self.assertEqual(tuple(x), ([1, 2], 3))
-        y = copy.deepcopy(x)
-        self.assertEqual(tuple(y), ([1, 2], 3))
         self.assertIsNot(x, y)
         self.assertIsNot(x[0], y[0])
 
@@ -662,107 +446,7 @@
         bar = lambda: None
         self.assertEqual(copy.deepcopy(bar), bar)
 
-    def _check_weakref(self, _copy):
-        class C(object):
-            pass
-        obj = C()
-        x = weakref.ref(obj)
-        y = _copy(x)
-        self.assertIs(y, x)
-        del obj
-        y = _copy(x)
-        self.assertIs(y, x)
-
-    def test_copy_weakref(self):
-        self._check_weakref(copy.copy)
-
-    def test_deepcopy_weakref(self):
-        self._check_weakref(copy.deepcopy)
-
-    def _check_copy_weakdict(self, _dicttype):
-        class C(object):
-            pass
-        a, b, c, d = [C() for i in range(4)]
-        u = _dicttype()
-        u[a] = b
-        u[c] = d
-        v = copy.copy(u)
-        self.assertIsNot(v, u)
-        self.assertEqual(v, u)
-        self.assertEqual(v[a], b)
-        self.assertEqual(v[c], d)
-        self.assertEqual(len(v), 2)
-        del c, d
-        self.assertEqual(len(v), 1)
-        x, y = C(), C()
-        # The underlying containers are decoupled
-        v[x] = y
-        self.assertNotIn(x, u)
-
-    def test_copy_weakkeydict(self):
-        self._check_copy_weakdict(weakref.WeakKeyDictionary)
-
-    def test_copy_weakvaluedict(self):
-        self._check_copy_weakdict(weakref.WeakValueDictionary)
-
-    def test_deepcopy_weakkeydict(self):
-        class C(object):
-            def __init__(self, i):
-                self.i = i
-        a, b, c, d = [C(i) for i in range(4)]
-        u = weakref.WeakKeyDictionary()
-        u[a] = b
-        u[c] = d
-        # Keys aren't copied, values are
-        v = copy.deepcopy(u)
-        self.assertNotEqual(v, u)
-        self.assertEqual(len(v), 2)
-        self.assertIsNot(v[a], b)
-        self.assertIsNot(v[c], d)
-        self.assertEqual(v[a].i, b.i)
-        self.assertEqual(v[c].i, d.i)
-        del c
-        self.assertEqual(len(v), 1)
-
-    def test_deepcopy_weakvaluedict(self):
-        class C(object):
-            def __init__(self, i):
-                self.i = i
-        a, b, c, d = [C(i) for i in range(4)]
-        u = weakref.WeakValueDictionary()
-        u[a] = b
-        u[c] = d
-        # Keys are copied, values aren't
-        v = copy.deepcopy(u)
-        self.assertNotEqual(v, u)
-        self.assertEqual(len(v), 2)
-        (x, y), (z, t) = sorted(v.items(), key=lambda pair: pair[0].i)
-        self.assertIsNot(x, a)
-        self.assertEqual(x.i, a.i)
-        self.assertIs(y, b)
-        self.assertIsNot(z, c)
-        self.assertEqual(z.i, c.i)
-        self.assertIs(t, d)
-        del x, y, z, t
-        del d
-        self.assertEqual(len(v), 1)
-
-    def test_deepcopy_bound_method(self):
-        class Foo(object):
-            def m(self):
-                pass
-        f = Foo()
-        f.b = f.m
-        g = copy.deepcopy(f)
-        self.assertEqual(g.m, g.b)
-        self.assertIs(g.b.__self__, g)
-        g.b()
-
 
 def global_foo(x, y): return x+y
 
-def test_main():
-    support.run_unittest(TestCopy)
-
-if __name__ == "__main__":
-    test_main()
+