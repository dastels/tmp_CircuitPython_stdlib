--- <CPython-3.4.9>/test/list_tests.py
+++ lib/test/list_tests.py
@@ -17,13 +17,6 @@
 
         # Init clears previous values
         a = self.type2test([1, 2, 3])
-        a.__init__()
-        self.assertEqual(a, self.type2test([]))
-
-        # Init overwrites previous values
-        a = self.type2test([1, 2, 3])
-        a.__init__([4, 5, 6])
-        self.assertEqual(a, self.type2test([4, 5, 6]))
 
         # Mutables always return a new object
         b = self.type2test(a)
@@ -42,22 +35,8 @@
         self.assertEqual(str(a2), "[0, 1, 2]")
         self.assertEqual(repr(a2), "[0, 1, 2]")
 
-        a2.append(a2)
-        a2.append(3)
-        self.assertEqual(str(a2), "[0, 1, 2, [...], 3]")
-        self.assertEqual(repr(a2), "[0, 1, 2, [...], 3]")
-
-        l0 = []
-        for i in range(sys.getrecursionlimit() + 100):
-            l0 = [l0]
-        self.assertRaises(RuntimeError, repr, l0)
-
     def test_print(self):
         d = self.type2test(range(200))
-        d.append(d)
-        d.extend(range(200,400))
-        d.append(d)
-        d.append(400)
         try:
             with open(support.TESTFN, "w") as fo:
                 fo.write(str(d))
@@ -65,17 +44,6 @@
                 self.assertEqual(fo.read(), repr(d))
         finally:
             os.remove(support.TESTFN)
-
-    def test_set_subscript(self):
-        a = self.type2test(range(20))
-        self.assertRaises(ValueError, a.__setitem__, slice(0, 10, 0), [1,2,3])
-        self.assertRaises(TypeError, a.__setitem__, slice(0, 10), 1)
-        self.assertRaises(ValueError, a.__setitem__, slice(0, 10, 2), [1,2])
-        self.assertRaises(TypeError, a.__getitem__, 'x', 1)
-        a[slice(2,10,3)] = [1,2,3]
-        self.assertEqual(a, self.type2test([0, 1, 1, 3, 4, 2, 6, 7, 3,
-                                            9, 10, 11, 12, 13, 14, 15,
-                                            16, 17, 18, 19]))
 
     def test_reversed(self):
         a = self.type2test(range(20))
@@ -96,13 +64,6 @@
         self.assertEqual(a, self.type2test([0, 200]))
         a[-2] = 100
         self.assertEqual(a, self.type2test([100, 200]))
-        self.assertRaises(IndexError, a.__setitem__, -3, 200)
-        self.assertRaises(IndexError, a.__setitem__, 2, 200)
-
-        a = self.type2test([])
-        self.assertRaises(IndexError, a.__setitem__, 0, 200)
-        self.assertRaises(IndexError, a.__setitem__, -1, 200)
-        self.assertRaises(TypeError, a.__setitem__)
 
         a = self.type2test([0,1,2,3,4])
         a[0] = 1
@@ -132,15 +93,6 @@
         self.assertEqual(a, [1])
         del a[-1]
         self.assertEqual(a, [])
-
-        a = self.type2test([0, 1])
-        self.assertRaises(IndexError, a.__delitem__, -3)
-        self.assertRaises(IndexError, a.__delitem__, 2)
-
-        a = self.type2test([])
-        self.assertRaises(IndexError, a.__delitem__, 0)
-
-        self.assertRaises(TypeError, a.__delitem__)
 
     def test_setslice(self):
         l = [0, 1]
@@ -184,10 +136,6 @@
         a[:] = tuple(range(10))
         self.assertEqual(a, self.type2test(range(10)))
 
-        self.assertRaises(TypeError, a.__setitem__, slice(0, 1, 5))
-
-        self.assertRaises(TypeError, a.__setitem__)
-
     def test_delslice(self):
         a = self.type2test([0, 1])
         del a[1:2]
@@ -327,7 +275,6 @@
         # Handle comparison errors
         d = self.type2test(['a', 'b', BadCmp2(), 'c'])
         e = self.type2test(d)
-        self.assertRaises(BadExc, d.remove, 'c')
         for x, y in zip(d, e):
             # verify that original order and values are retained.
             self.assertIs(x, y)
@@ -389,8 +336,6 @@
         self.assertEqual(a.index(0, -3), 3)
         self.assertEqual(a.index(0, 3, 4), 3)
         self.assertEqual(a.index(0, -3, -2), 3)
-        self.assertEqual(a.index(0, -4*sys.maxsize, 4*sys.maxsize), 2)
-        self.assertRaises(ValueError, a.index, 0, 4*sys.maxsize,-4*sys.maxsize)
         self.assertRaises(ValueError, a.index, 2, 0, -10)
         a.remove(0)
         self.assertRaises(ValueError, a.index, 2, 0, 4)
@@ -494,92 +439,10 @@
 
         self.assertRaises(TypeError, z.sort, 2)
 
-        def selfmodifyingComparison(x,y):
-            z.append(1)
-            if x == y:
-                return 0
-            elif x < y:
-                return -1
-            else: # x > y
-                return 1
-        self.assertRaises(ValueError, z.sort,
-                          key=cmp_to_key(selfmodifyingComparison))
-
-        self.assertRaises(TypeError, z.sort, 42, 42, 42, 42)
-
-    def test_slice(self):
-        u = self.type2test("spam")
-        u[:2] = "h"
-        self.assertEqual(u, list("ham"))
-
-    def test_iadd(self):
-        super().test_iadd()
-        u = self.type2test([0, 1])
-        u2 = u
-        u += [2, 3]
-        self.assertIs(u, u2)
-
-        u = self.type2test("spam")
-        u += "eggs"
-        self.assertEqual(u, self.type2test("spameggs"))
-
-        self.assertRaises(TypeError, u.__iadd__, None)
-
-    def test_imul(self):
-        u = self.type2test([0, 1])
-        u *= 3
-        self.assertEqual(u, self.type2test([0, 1, 0, 1, 0, 1]))
-        u *= 0
-        self.assertEqual(u, self.type2test([]))
-        s = self.type2test([])
-        oldid = id(s)
-        s *= 10
-        self.assertEqual(id(s), oldid)
-
-    def test_extendedslicing(self):
-        #  subscript
-        a = self.type2test([0,1,2,3,4])
-
-        #  deletion
-        del a[::2]
-        self.assertEqual(a, self.type2test([1,3]))
-        a = self.type2test(range(5))
-        del a[1::2]
-        self.assertEqual(a, self.type2test([0,2,4]))
-        a = self.type2test(range(5))
-        del a[1::-2]
-        self.assertEqual(a, self.type2test([0,2,3,4]))
-        a = self.type2test(range(10))
-        del a[::1000]
-        self.assertEqual(a, self.type2test([1, 2, 3, 4, 5, 6, 7, 8, 9]))
-        #  assignment
-        a = self.type2test(range(10))
-        a[::2] = [-1]*5
-        self.assertEqual(a, self.type2test([-1, 1, -1, 3, -1, 5, -1, 7, -1, 9]))
-        a = self.type2test(range(10))
-        a[::-4] = [10]*3
-        self.assertEqual(a, self.type2test([0, 10, 2, 3, 4, 10, 6, 7, 8 ,10]))
-        a = self.type2test(range(4))
-        a[::-1] = a
-        self.assertEqual(a, self.type2test([3, 2, 1, 0]))
-        a = self.type2test(range(10))
-        b = a[:]
-        c = a[:]
-        a[2:3] = self.type2test(["two", "elements"])
-        b[slice(2,3)] = self.type2test(["two", "elements"])
-        c[2:3:] = self.type2test(["two", "elements"])
-        self.assertEqual(a, b)
-        self.assertEqual(a, c)
-        a = self.type2test(range(10))
-        a[::2] = tuple(range(5))
-        self.assertEqual(a, self.type2test([0, 1, 1, 3, 2, 5, 3, 7, 4, 9]))
-        # test issue7788
-        a = self.type2test(range(10))
-        del a[9::1<<333]
-
     def test_constructor_exception_handling(self):
         # Bug #1242657
         class F(object):
             def __iter__(self):
                 raise KeyboardInterrupt
         self.assertRaises(KeyboardInterrupt, list, F())
+