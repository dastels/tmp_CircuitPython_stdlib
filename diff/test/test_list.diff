--- <CPython-3.4.9>/test/test_list.py
+++ lib/test/test_list.py
@@ -1,6 +1,5 @@
 import sys
 from test import support, list_tests
-import pickle
 
 class ListTest(list_tests.CommonTest):
     type2test = list
@@ -52,54 +51,6 @@
         self.assertEqual(len([0]), 1)
         self.assertEqual(len([0, 1, 2]), 3)
 
-    def test_overflow(self):
-        lst = [4, 5, 6, 7]
-        n = int((sys.maxsize*2+2) // len(lst))
-        def mul(a, b): return a * b
-        def imul(a, b): a *= b
-        self.assertRaises((MemoryError, OverflowError), mul, lst, n)
-        self.assertRaises((MemoryError, OverflowError), imul, lst, n)
-
-    def test_repr_large(self):
-        # Check the repr of large list objects
-        def check(n):
-            l = [0] * n
-            s = repr(l)
-            self.assertEqual(s,
-                '[' + ', '.join(['0'] * n) + ']')
-        check(10)       # check our checking code
-        check(1000000)
-
-    def test_iterator_pickle(self):
-        # Userlist iterators don't support pickling yet since
-        # they are based on generators.
-        data = self.type2test([4, 5, 6, 7])
-        for proto in range(pickle.HIGHEST_PROTOCOL + 1):
-            it = itorg = iter(data)
-            d = pickle.dumps(it, proto)
-            it = pickle.loads(d)
-            self.assertEqual(type(itorg), type(it))
-            self.assertEqual(self.type2test(it), self.type2test(data))
-
-            it = pickle.loads(d)
-            next(it)
-            d = pickle.dumps(it, proto)
-            self.assertEqual(self.type2test(it), self.type2test(data)[1:])
-
-    def test_reversed_pickle(self):
-        data = self.type2test([4, 5, 6, 7])
-        for proto in range(pickle.HIGHEST_PROTOCOL + 1):
-            it = itorg = reversed(data)
-            d = pickle.dumps(it, proto)
-            it = pickle.loads(d)
-            self.assertEqual(type(itorg), type(it))
-            self.assertEqual(self.type2test(it), self.type2test(reversed(data)))
-
-            it = pickle.loads(d)
-            next(it)
-            d = pickle.dumps(it, proto)
-            self.assertEqual(self.type2test(it), self.type2test(reversed(data))[1:])
-
     def test_no_comdat_folding(self):
         # Issue 8847: In the PGO build, the MSVC linker's COMDAT folding
         # optimization causes failures in code that relies on distinct
@@ -108,20 +59,4 @@
         with self.assertRaises(TypeError):
             (3,) + L([1,2])
 
-def test_main(verbose=None):
-    support.run_unittest(ListTest)
-
-    # verify reference counting
-    import sys
-    if verbose and hasattr(sys, "gettotalrefcount"):
-        import gc
-        counts = [None] * 5
-        for i in range(len(counts)):
-            support.run_unittest(ListTest)
-            gc.collect()
-            counts[i] = sys.gettotalrefcount()
-        print(counts)
-
-
-if __name__ == "__main__":
-    test_main(verbose=True)
+