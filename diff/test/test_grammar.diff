--- <CPython-3.4.9>/test/test_grammar.py
+++ lib/test/test_grammar.py
@@ -1,7 +1,6 @@
 # Python test set -- part 1, grammar.
 # This just tests whether the parser accepts them all.
 
-from test.support import run_unittest, check_syntax_error
 import unittest
 import sys
 # testing import *
@@ -79,12 +78,6 @@
         x = 3.e14
         x = .3e14
         x = 3.1e4
-
-    def test_float_exponent_tokenization(self):
-        # See issue 21642.
-        self.assertEqual(1 if 1else 0, 1)
-        self.assertEqual(1 if 0else 0, 0)
-        self.assertRaises(SyntaxError, eval, "0 if 1Else 0")
 
     def test_string_literals(self):
         x = ''; y = ""; self.assertTrue(len(x) == 0 and x == y)
@@ -131,13 +124,6 @@
         self.assertTrue(x is Ellipsis)
         self.assertRaises(SyntaxError, eval, ".. .")
 
-    def test_eof_error(self):
-        samples = ("def foo(", "\ndef foo(", "def foo(\n")
-        for s in samples:
-            with self.assertRaises(SyntaxError) as cm:
-                compile(s, "<test>", "exec")
-            self.assertIn("unexpected EOF", str(cm.exception))
-
 class GrammarTests(unittest.TestCase):
 
     # single_input: NEWLINE | simple_stmt | compound_stmt NEWLINE
@@ -172,8 +158,6 @@
         f1(*(), **{})
         def f2(one_argument): pass
         def f3(two, arguments): pass
-        self.assertEqual(f2.__code__.co_varnames, ('one_argument',))
-        self.assertEqual(f3.__code__.co_varnames, ('two', 'arguments'))
         def a1(one_arg,): pass
         def a2(two, args,): pass
         def v0(*rest): pass
@@ -275,13 +259,6 @@
         d22v(1, 2, *(3, 4, 5))
         d22v(1, *(2, 3), **{'d': 4})
 
-        # keyword argument type tests
-        try:
-            str('x', **{b'foo':1 })
-        except TypeError:
-            pass
-        else:
-            self.fail('Bytes should not work as keyword argument names')
         # keyword only argument tests
         def pos0key1(*, key): return key
         pos0key1(key=100)
@@ -299,41 +276,6 @@
         self.assertEqual(f(1, x=2, *[3, 4], y=5), ((1, 3, 4),
                                                     {'x':2, 'y':5}))
         self.assertRaises(SyntaxError, eval, "f(1, *(2,3), 4)")
-        self.assertRaises(SyntaxError, eval, "f(1, x=2, *(3,4), x=5)")
-
-        # argument annotation tests
-        def f(x) -> list: pass
-        self.assertEqual(f.__annotations__, {'return': list})
-        def f(x: int): pass
-        self.assertEqual(f.__annotations__, {'x': int})
-        def f(*x: str): pass
-        self.assertEqual(f.__annotations__, {'x': str})
-        def f(**x: float): pass
-        self.assertEqual(f.__annotations__, {'x': float})
-        def f(x, y: 1+2): pass
-        self.assertEqual(f.__annotations__, {'y': 3})
-        def f(a, b: 1, c: 2, d): pass
-        self.assertEqual(f.__annotations__, {'b': 1, 'c': 2})
-        def f(a, b: 1, c: 2, d, e: 3 = 4, f=5, *g: 6): pass
-        self.assertEqual(f.__annotations__,
-                         {'b': 1, 'c': 2, 'e': 3, 'g': 6})
-        def f(a, b: 1, c: 2, d, e: 3 = 4, f=5, *g: 6, h: 7, i=8, j: 9 = 10,
-              **k: 11) -> 12: pass
-        self.assertEqual(f.__annotations__,
-                         {'b': 1, 'c': 2, 'e': 3, 'g': 6, 'h': 7, 'j': 9,
-                          'k': 11, 'return': 12})
-        # Check for issue #20625 -- annotations mangling
-        class Spam:
-            def f(self, *, __kw: 1):
-                pass
-        class Ham(Spam): pass
-        self.assertEqual(Spam.f.__annotations__, {'_Spam__kw': 1})
-        self.assertEqual(Ham.f.__annotations__, {'_Spam__kw': 1})
-        # Check for SF Bug #1697248 - mixing decorators and a return annotation
-        def null(x): return x
-        @null
-        def f(x) -> list: pass
-        self.assertEqual(f.__annotations__, {'return': list})
 
         # test MAKE_CLOSURE with a variety of oparg's
         closure = 1
@@ -342,9 +284,6 @@
         def f(*, k=1): return closure
         def f() -> int: return closure
 
-        # Check ast errors in *args and *kwargs
-        check_syntax_error(self, "f(*g(1=2))")
-        check_syntax_error(self, "f(**g(1=2))")
 
     def test_lambdef(self):
         ### lambdef: 'lambda' [varargslist] ':' test
@@ -358,8 +297,6 @@
         l5 = lambda x, y, z=2: x + y + z
         self.assertEqual(l5(1, 2), 5)
         self.assertEqual(l5(1, 2, 3), 6)
-        check_syntax_error(self, "lambda x: x = 2")
-        check_syntax_error(self, "lambda (None,): None")
         l6 = lambda x, y, *, k=20: x+y+k
         self.assertEqual(l6(1,2), 1+2+20)
         self.assertEqual(l6(1,2,k=10), 1+2+10)
@@ -389,34 +326,9 @@
         x, y, z = 1, 2, 3
         abc = a, b, c = x, y, z = xyz = 1, 2, (3, 4)
 
-        check_syntax_error(self, "x + 1 = 1")
-        check_syntax_error(self, "a + 1 = b + 2")
 
     # Check the heuristic for print & exec covers significant cases
     # As well as placing some limits on false positives
-    def test_former_statements_refer_to_builtins(self):
-        keywords = "print", "exec"
-        # Cases where we want the custom error
-        cases = [
-            "{} foo",
-            "{} {{1:foo}}",
-            "if 1: {} foo",
-            "if 1: {} {{1:foo}}",
-            "if 1:\n    {} foo",
-            "if 1:\n    {} {{1:foo}}",
-        ]
-        for keyword in keywords:
-            custom_msg = "call to '{}'".format(keyword)
-            for case in cases:
-                source = case.format(keyword)
-                with self.subTest(source=source):
-                    with self.assertRaisesRegex(SyntaxError, custom_msg):
-                        exec(source)
-                source = source.replace("foo", "(foo.)")
-                with self.subTest(source=source):
-                    with self.assertRaisesRegex(SyntaxError, "invalid syntax"):
-                        exec(source)
-
     def test_del_stmt(self):
         # 'del' exprlist
         abc = [1,2,3]
@@ -495,7 +407,6 @@
         def g2(): return 1
         g1()
         x = g2()
-        check_syntax_error(self, "class foo:return 1")
 
     def test_yield(self):
         # Allowed as standalone statement
@@ -508,28 +419,14 @@
         def g(): yield 1, 1
         def g(): x = yield 1, 1
         # 'yield from' does not
-        check_syntax_error(self, "def g(): yield from (), 1")
-        check_syntax_error(self, "def g(): x = yield from (), 1")
         # Requires parentheses as subexpression
         def g(): 1, (yield 1)
         def g(): 1, (yield from ())
-        check_syntax_error(self, "def g(): 1, yield 1")
-        check_syntax_error(self, "def g(): 1, yield from ()")
         # Requires parentheses as call argument
         def g(): f((yield 1))
         def g(): f((yield 1), 1)
         def g(): f((yield from ()))
         def g(): f((yield from ()), 1)
-        check_syntax_error(self, "def g(): f(yield 1)")
-        check_syntax_error(self, "def g(): f(yield 1, 1)")
-        check_syntax_error(self, "def g(): f(yield from ())")
-        check_syntax_error(self, "def g(): f(yield from (), 1)")
-        # Not allowed at top level
-        check_syntax_error(self, "yield")
-        check_syntax_error(self, "yield from")
-        # Not allowed at class scope
-        check_syntax_error(self, "class foo:yield 1")
-        check_syntax_error(self, "class foo:yield from ()")
 
 
     def test_raise(self):
@@ -584,8 +481,6 @@
             self.fail("'assert True, msg' should not have "
                       "raised an AssertionError")
 
-    # these tests fail if python is run with -O, so check __debug__
-    @unittest.skipUnless(__debug__, "Won't work if __debug__ is False")
     def testAssert2(self):
         try:
             assert 0, "msg"
@@ -879,9 +774,6 @@
 
         test_nested_front()
 
-        check_syntax_error(self, "[i, s for i in nums for s in strs]")
-        check_syntax_error(self, "[x if y]")
-
         suppliers = [
           (1, "Boeing"),
           (2, "Ford"),
@@ -941,8 +833,6 @@
         self.assertEqual(sum(x for x in [y for y in (z for z in range(10))]), sum([x for x in range(10)]))
         self.assertEqual(sum(x for x in (y for y in (z for z in range(10) if True)) if True), sum([x for x in range(10)]))
         self.assertEqual(sum(x for x in (y for y in (z for z in range(10) if True) if False) if True), 0)
-        check_syntax_error(self, "foo(x for x in range(10), 100)")
-        check_syntax_error(self, "foo(100, x for x in range(10))")
 
     def test_comprehension_specials(self):
         # test for outmost iterable precomputation
@@ -1019,8 +909,4 @@
         self.assertFalse(False is 2 is 3)
 
 
-def test_main():
-    run_unittest(TokenTests, GrammarTests)
-
-if __name__ == '__main__':
-    test_main()
+