--- <CPython-3.4.9>/test/test_sort.py
+++ lib/test/test_sort.py
@@ -1,5 +1,4 @@
 from test import support
-import random
 import sys
 import unittest
 from functools import cmp_to_key
@@ -44,10 +43,10 @@
     def testStressfully(self):
         # Try a variety of sizes at and around powers of 2, and at powers of 10.
         sizes = [0]
-        for power in range(1, 10):
+        for power in range(1, 5):                                               ###
             n = 2 ** power
             sizes.extend(range(n-1, n+2))
-        sizes.extend([10, 100, 1000])
+        sizes.extend([10, 100])                                                 ###
 
         class Complains(object):
             maybe_complain = True
@@ -123,48 +122,7 @@
                 Complains.maybe_complain = False
                 check("exception during sort left some permutation", x, s)
 
-            s = [Stable(random.randrange(10), i) for i in range(n)]
-            augmented = [(e, e.index) for e in s]
-            augmented.sort()    # forced stable because ties broken by index
-            x = [e for e, i in augmented] # a stable sort of s
-            check("stability", x, s)
-
-#==============================================================================
-
-class TestBugs(unittest.TestCase):
-
-    def test_bug453523(self):
-        # bug 453523 -- list.sort() crasher.
-        # If this fails, the most likely outcome is a core dump.
-        # Mutations during a list sort should raise a ValueError.
-
-        class C:
-            def __lt__(self, other):
-                if L and random.random() < 0.75:
-                    L.pop()
-                else:
-                    L.append(3)
-                return random.random() < 0.5
-
-        L = [C() for i in range(50)]
-        self.assertRaises(ValueError, L.sort)
-
-    def test_undetected_mutation(self):
-        # Python 2.4a1 did not always detect mutation
-        memorywaster = []
-        for i in range(20):
-            def mutating_cmp(x, y):
-                L.append(3)
-                L.pop()
-                return (x > y) - (x < y)
-            L = [1,2]
-            self.assertRaises(ValueError, L.sort, key=cmp_to_key(mutating_cmp))
-            def mutating_cmp(x, y):
-                L.append(3)
-                del L[:]
-                return (x > y) - (x < y)
-            self.assertRaises(ValueError, L.sort, key=cmp_to_key(mutating_cmp))
-            memorywaster = [memorywaster]
+
 
 #==============================================================================
 
@@ -184,39 +142,12 @@
         data = 'The quick Brown fox Jumped over The lazy Dog'.split()
         self.assertRaises(TypeError, data.sort, key=lambda x,y: 0)
 
-    def test_stability(self):
-        data = [(random.randrange(100), i) for i in range(200)]
-        copy = data[:]
-        data.sort(key=lambda t: t[0])   # sort on the random first field
-        copy.sort()                     # sort using both fields
-        self.assertEqual(data, copy)    # should get the same result
-
     def test_key_with_exception(self):
         # Verify that the wrapper has been removed
         data = list(range(-2, 2))
         dup = data[:]
         self.assertRaises(ZeroDivisionError, data.sort, key=lambda x: 1/x)
         self.assertEqual(data, dup)
-
-    def test_key_with_mutation(self):
-        data = list(range(10))
-        def k(x):
-            del data[:]
-            data[:] = range(20)
-            return x
-        self.assertRaises(ValueError, data.sort, key=k)
-
-    def test_key_with_mutating_del(self):
-        data = list(range(10))
-        class SortKiller(object):
-            def __init__(self, x):
-                pass
-            def __del__(self):
-                del data[:]
-                data[:] = range(20)
-            def __lt__(self, other):
-                return id(self) < id(other)
-        self.assertRaises(ValueError, data.sort, key=SortKiller)
 
     def test_key_with_mutating_del_and_exception(self):
         data = list(range(10))
@@ -256,30 +187,35 @@
             return (y0 > x0) - (y0 < x0)
         data.sort(key=cmp_to_key(my_cmp), reverse=True)
         copy1.sort(key=cmp_to_key(my_cmp_reversed))
-        self.assertEqual(data, copy1)
         copy2.sort(key=lambda x: x[0], reverse=True)
         self.assertEqual(data, copy2)
 
 #==============================================================================
-
-def test_main(verbose=None):
-    test_classes = (
-        TestBase,
-        TestDecorateSortUndecorate,
-        TestBugs,
-    )
-
-    support.run_unittest(*test_classes)
-
-    # verify reference counting
-    if verbose and hasattr(sys, "gettotalrefcount"):
-        import gc
-        counts = [None] * 5
-        for i in range(len(counts)):
-            support.run_unittest(*test_classes)
-            gc.collect()
-            counts[i] = sys.gettotalrefcount()
-        print(counts)
-
-if __name__ == "__main__":
-    test_main(verbose=True)
+# Until random gets shuffle:                                                    ###
+import random as _random                                                        ###
+                                                                                ###
+BPF = 23                                                                        ###
+                                                                                ###
+class Random:                                                                   ###
+    def _randbelow_without_getrandbits(self, n, int=int, maxsize=1<<BPF):       ###
+        rem = maxsize % n                                                       ###
+        limit = (maxsize - rem) / maxsize                                       ###
+        r = _random.random()                                                    ###
+        while r >= limit:                                                       ###
+            r = _random.random()                                                ###
+        return int(r*maxsize) % n                                               ###
+                                                                                ###
+    def shuffle(self, x):                                                       ###
+        randbelow = self._randbelow_without_getrandbits                         ###
+        for i in reversed(range(1, len(x))):                                    ###
+            j = randbelow(i+1)                                                  ###
+            x[i], x[j] = x[j], x[i]                                             ###
+                                                                                ###
+_inst = Random()                                                                ###
+class random:                                                                   ###
+    random = _random.random                                                     ###
+    def randrange(stop):                                                        ###
+        return _random.randrange(stop)                                          ###
+    shuffle = _inst.shuffle                                                     ###
+
+