--- <CPython-3.4.9>/test/test_glob.py
+++ lib/test/test_glob.py
@@ -4,8 +4,7 @@
 import sys
 import unittest
 
-from test.support import (run_unittest, TESTFN, skip_unless_symlink,
-                          can_symlink, create_empty_file)
+from test.support import (TESTFN, create_empty_file)                            ###
 
 
 class GlobTests(unittest.TestCase):
@@ -22,6 +21,7 @@
 
     def setUp(self):
         self.tempdir = TESTFN + "_dir"
+        shutil.rmtree(self.tempdir, True)                                       ### Keep until mkdir('a/a') is fixed, because setup will fail and not clean up
         self.mktemp('a', 'D')
         self.mktemp('aab', 'F')
         self.mktemp('.aa', 'G')
@@ -30,10 +30,6 @@
         self.mktemp('ZZZ')
         self.mktemp('a', 'bcd', 'EF')
         self.mktemp('a', 'bcd', 'efg', 'ha')
-        if can_symlink():
-            os.symlink(self.norm('broken'), self.norm('sym1'))
-            os.symlink('broken', self.norm('sym2'))
-            os.symlink(os.path.join('a', 'bcd'), self.norm('sym3'))
 
     def tearDown(self):
         shutil.rmtree(self.tempdir)
@@ -70,14 +66,12 @@
         self.assertEqual({type(r) for r in res}, {str})
 
         res = glob.glob(b'*')
-        self.assertEqual({type(r) for r in res}, {bytes})
         res = glob.glob(os.path.join(os.fsencode(os.curdir), b'*'))
         self.assertEqual({type(r) for r in res}, {bytes})
 
     def test_glob_one_directory(self):
         eq = self.assertSequencesEqual_noorder
         eq(self.glob('a*'), map(self.norm, ['a', 'aab', 'aaa']))
-        eq(self.glob('*a'), map(self.norm, ['a', 'aaa']))
         eq(self.glob('.*'), map(self.norm, ['.aa', '.bb']))
         eq(self.glob('?aa'), map(self.norm, ['aaa']))
         eq(self.glob('aa?'), map(self.norm, ['aaa', 'aab']))
@@ -86,13 +80,6 @@
 
     def test_glob_nested_directory(self):
         eq = self.assertSequencesEqual_noorder
-        if os.path.normcase("abCD") == "abCD":
-            # case-sensitive filesystem
-            eq(self.glob('a', 'bcd', 'E*'), [self.norm('a', 'bcd', 'EF')])
-        else:
-            # case insensitive filesystem
-            eq(self.glob('a', 'bcd', 'E*'), [self.norm('a', 'bcd', 'EF'),
-                                             self.norm('a', 'bcd', 'efg')])
         eq(self.glob('a', 'bcd', '*g'), [self.norm('a', 'bcd', 'efg')])
 
     def test_glob_directory_names(self):
@@ -101,8 +88,6 @@
         eq(self.glob('*', '*a'), [])
         eq(self.glob('a', '*', '*', '*a'),
            [self.norm('a', 'bcd', 'efg', 'ha')])
-        eq(self.glob('?a?', '*F'), [self.norm('aaa', 'zzzF'),
-                                    self.norm('aab', 'F')])
 
     def test_glob_directory_with_trailing_slash(self):
         # Patterns ending with a slash shouldn't match non-dirs
@@ -137,64 +122,4 @@
                        os.fsencode(self.norm('aab') + os.sep)},
                       ])
 
-    @skip_unless_symlink
-    def test_glob_symlinks(self):
-        eq = self.assertSequencesEqual_noorder
-        eq(self.glob('sym3'), [self.norm('sym3')])
-        eq(self.glob('sym3', '*'), [self.norm('sym3', 'EF'),
-                                    self.norm('sym3', 'efg')])
-        self.assertIn(self.glob('sym3' + os.sep),
-                      [[self.norm('sym3')], [self.norm('sym3') + os.sep]])
-        eq(self.glob('*', '*F'),
-           [self.norm('aaa', 'zzzF'),
-            self.norm('aab', 'F'), self.norm('sym3', 'EF')])
-
-    @skip_unless_symlink
-    def test_glob_broken_symlinks(self):
-        eq = self.assertSequencesEqual_noorder
-        eq(self.glob('sym*'), [self.norm('sym1'), self.norm('sym2'),
-                               self.norm('sym3')])
-        eq(self.glob('sym1'), [self.norm('sym1')])
-        eq(self.glob('sym2'), [self.norm('sym2')])
-
-    @unittest.skipUnless(sys.platform == "win32", "Win32 specific test")
-    def test_glob_magic_in_drive(self):
-        eq = self.assertSequencesEqual_noorder
-        eq(glob.glob('*:'), [])
-        eq(glob.glob(b'*:'), [])
-        eq(glob.glob('?:'), [])
-        eq(glob.glob(b'?:'), [])
-        eq(glob.glob('\\\\?\\c:\\'), ['\\\\?\\c:\\'])
-        eq(glob.glob(b'\\\\?\\c:\\'), [b'\\\\?\\c:\\'])
-        eq(glob.glob('\\\\*\\*\\'), [])
-        eq(glob.glob(b'\\\\*\\*\\'), [])
-
-    def check_escape(self, arg, expected):
-        self.assertEqual(glob.escape(arg), expected)
-        self.assertEqual(glob.escape(os.fsencode(arg)), os.fsencode(expected))
-
-    def test_escape(self):
-        check = self.check_escape
-        check('abc', 'abc')
-        check('[', '[[]')
-        check('?', '[?]')
-        check('*', '[*]')
-        check('[[_/*?*/_]]', '[[][[]_/[*][?][*]/_]]')
-        check('/[[_/*?*/_]]/', '/[[][[]_/[*][?][*]/_]]/')
-
-    @unittest.skipUnless(sys.platform == "win32", "Win32 specific test")
-    def test_escape_windows(self):
-        check = self.check_escape
-        check('?:?', '?:[?]')
-        check('*:*', '*:[*]')
-        check(r'\\?\c:\?', r'\\?\c:\[?]')
-        check(r'\\*\*\*', r'\\*\*\[*]')
-        check('//?/c:/?', '//?/c:/[?]')
-        check('//*/*/*', '//*/*/[*]')
-
-def test_main():
-    run_unittest(GlobTests)
-
-
-if __name__ == "__main__":
-    test_main()
+