--- <CPython-3.4.9>/test/test_json/test_encode_basestring_ascii.py
+++ lib/test/test_json/test_encode_basestring_ascii.py
@@ -1,6 +1,6 @@
+import unittest                                                                 ###
 from collections import OrderedDict
 from test.test_json import PyTest, CTest
-from test.support import bigaddrspacetest
 
 
 CASES = [
@@ -21,31 +21,20 @@
 ]
 
 class TestEncodeBasestringAscii:
-    def test_encode_basestring_ascii(self):
-        fname = self.json.encoder.encode_basestring_ascii.__name__
-        for input_string, expect in CASES:
-            result = self.json.encoder.encode_basestring_ascii(input_string)
-            self.assertEqual(result, expect,
-                '{0!r} != {1!r} for {2}({3!r})'.format(
-                    result, expect, fname, input_string))
-
+    @unittest.expectedFailure                                                   ###
     def test_ordered_dict(self):
         # See issue 6105
         items = [('one', 1), ('two', 2), ('three', 3), ('four', 4), ('five', 5)]
         s = self.dumps(OrderedDict(items))
         self.assertEqual(s, '{"one": 1, "two": 2, "three": 3, "four": 4, "five": 5}')
 
+    @unittest.skip('keyword argument not supported')                            ###
     def test_sorted_dict(self):
         items = [('one', 1), ('two', 2), ('three', 3), ('four', 4), ('five', 5)]
         s = self.dumps(dict(items), sort_keys=True)
         self.assertEqual(s, '{"five": 5, "four": 4, "one": 1, "three": 3, "two": 2}')
 
 
-class TestPyEncodeBasestringAscii(TestEncodeBasestringAscii, PyTest): pass
 class TestCEncodeBasestringAscii(TestEncodeBasestringAscii, CTest):
-    @bigaddrspacetest
-    def test_overflow(self):
-        size = (2**32)//6 + 1
-        s = "\x00"*size
-        with self.assertRaises(OverflowError):
-            self.json.encoder.encode_basestring_ascii(s)
+    pass                                                                        ###
+