--- <CPython-3.4.9>/unittest/loader.py
+++ lib/unittest/loader.py
@@ -1,9 +1,7 @@
 """Loading unittests."""
 
 import os
-import re
 import sys
-import traceback
 import types
 import functools
 
@@ -13,10 +11,6 @@
 
 __unittest = True
 
-# what about .pyc or .pyo (etc)
-# we would need to avoid loading the same tests multiple times
-# from '.py', '.pyc' *and* '.pyo'
-VALID_MODULE_NAME = re.compile(r'[_a-z]\w*\.py$', re.IGNORECASE)
 
 
 class _FailedTest(case.TestCase):
@@ -28,6 +22,14 @@
 
     def __getattr__(self, name):
         if name != self._testMethodName:
+            # AttributeError: 'super' object has no attribute '__getattr__'     ###
+            # Fix for the _isnotsuite duck typing call site                     ###
+            if name == '__getitem__':                                           ###
+                raise TypeError                                                 ###
+            # Caused by an error during load_tests()                            ###
+            if name == '__unittest_expecting_failure__':                        ###
+                return False                                                    ###
+            print('\n\n_FailedTest.__getattr__', name)                          ###
             return super(_FailedTest, self).__getattr__(name)
         def testFailure():
             raise self._exception
@@ -35,7 +37,7 @@
 
 
 def _make_failed_import_test(name, suiteClass):
-    message = 'Failed to import test module: %s\n%s' % (name, traceback.format_exc())
+    message = 'Failed to import test module: %s' % (name,)                      ###
     return _make_failed_test(name, ImportError(message), suiteClass)
 
 def _make_failed_load_tests(name, exception, suiteClass):
@@ -312,9 +314,6 @@
         for path in paths:
             full_path = os.path.join(start_dir, path)
             if os.path.isfile(full_path):
-                if not VALID_MODULE_NAME.match(path):
-                    # valid Python identifiers only
-                    continue
                 if not self._match_path(path, full_path, pattern):
                     continue
                 # if the test file matches, load it
@@ -388,3 +387,4 @@
                   suiteClass=suite.TestSuite):
     return _makeLoader(prefix, sortUsing, suiteClass).loadTestsFromModule(\
         module)
+