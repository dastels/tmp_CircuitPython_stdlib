--- <CPython-3.4.9>/unittest/loader.py
+++ lib/unittest/loader.py
@@ -1,7 +1,6 @@
 """Loading unittests."""
 
 import os
-import re
 import sys
 import traceback
 import types
@@ -13,10 +12,6 @@
 
 __unittest = True
 
-# what about .pyc or .pyo (etc)
-# we would need to avoid loading the same tests multiple times
-# from '.py', '.pyc' *and* '.pyo'
-VALID_MODULE_NAME = re.compile(r'[_a-z]\w*\.py$', re.IGNORECASE)
 
 
 class _FailedTest(case.TestCase):
@@ -28,6 +23,14 @@
 
     def __getattr__(self, name):
         if name != self._testMethodName:
+            # AttributeError: 'super' object has no attribute '__getattr__'     ###
+            # Fix for the _isnotsuite duck typing call site                     ###
+            if name == '__getitem__':                                           ###
+                raise TypeError                                                 ###
+            # Caused by an error during load_tests()                            ###
+            if name == '__unittest_expecting_failure__':                        ###
+                return False                                                    ###
+            print('\n\n_FailedTest.__getattr__', name)                          ###
             return super(_FailedTest, self).__getattr__(name)
         def testFailure():
             raise self._exception
@@ -217,7 +220,7 @@
         if os.path.isdir(os.path.abspath(start_dir)):
             start_dir = os.path.abspath(start_dir)
             if start_dir != top_level_dir:
-                is_not_importable = not os.path.isfile(os.path.join(start_dir, '__init__.py'))
+                is_not_importable = not (os.path.isfile(os.path.join(start_dir, '__init__.py')) or os.path.isfile(os.path.join(start_dir, '__init__.mpy')))  ###
         else:
             # support for discovery from dotted module names
             try:
@@ -231,31 +234,6 @@
                     start_dir = os.path.abspath(
                        os.path.dirname((the_module.__file__)))
                 except AttributeError:
-                    # look for namespace packages
-                    try:
-                        spec = the_module.__spec__
-                    except AttributeError:
-                        spec = None
-
-                    if spec and spec.loader is None:
-                        if spec.submodule_search_locations is not None:
-                            is_namespace = True
-
-                            for path in the_module.__path__:
-                                if (not set_implicit_top and
-                                    not path.startswith(top_level_dir)):
-                                    continue
-                                self._top_level_dir = \
-                                    (path.split(the_module.__name__
-                                         .replace(".", os.path.sep))[0])
-                                tests.extend(self._find_tests(path,
-                                                              pattern,
-                                                              namespace=True))
-                    elif the_module.__name__ in sys.builtin_module_names:
-                        # builtin module
-                        raise TypeError('Can not use builtin modules '
-                                        'as dotted module names') from None
-                    else:
                         raise TypeError(
                             'don\'t know how to discover from {!r}'
                             .format(the_module)) from None
@@ -312,9 +290,6 @@
         for path in paths:
             full_path = os.path.join(start_dir, path)
             if os.path.isfile(full_path):
-                if not VALID_MODULE_NAME.match(path):
-                    # valid Python identifiers only
-                    continue
                 if not self._match_path(path, full_path, pattern):
                     continue
                 # if the test file matches, load it
@@ -388,3 +363,4 @@
                   suiteClass=suite.TestSuite):
     return _makeLoader(prefix, sortUsing, suiteClass).loadTestsFromModule(\
         module)
+