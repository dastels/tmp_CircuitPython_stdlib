--- <CPython-3.4.9>/unittest/test/test_skipping.py
+++ lib/unittest/test/test_skipping.py
@@ -29,30 +29,6 @@
         self.assertEqual(result.skipped, [(test, "testing")])
         self.assertEqual(result.testsRun, 1)
 
-    def test_skipping_subtests(self):
-        class Foo(unittest.TestCase):
-            def test_skip_me(self):
-                with self.subTest(a=1):
-                    with self.subTest(b=2):
-                        self.skipTest("skip 1")
-                    self.skipTest("skip 2")
-                self.skipTest("skip 3")
-        events = []
-        result = LoggingResult(events)
-        test = Foo("test_skip_me")
-        test.run(result)
-        self.assertEqual(events, ['startTest', 'addSkip', 'addSkip',
-                                  'addSkip', 'stopTest'])
-        self.assertEqual(len(result.skipped), 3)
-        subtest, msg = result.skipped[0]
-        self.assertEqual(msg, "skip 1")
-        self.assertIsInstance(subtest, unittest.TestCase)
-        self.assertIsNot(subtest, test)
-        subtest, msg = result.skipped[1]
-        self.assertEqual(msg, "skip 2")
-        self.assertIsInstance(subtest, unittest.TestCase)
-        self.assertIsNot(subtest, test)
-        self.assertEqual(result.skipped[2], (test, "skip 3"))
 
     def test_skipping_decorators(self):
         op_table = ((unittest.skipUnless, False, True),
@@ -153,30 +129,6 @@
         self.assertEqual(result.expectedFailures[0][0], test)
         self.assertTrue(result.wasSuccessful())
 
-    def test_expected_failure_subtests(self):
-        # A failure in any subtest counts as the expected failure of the
-        # whole test.
-        class Foo(unittest.TestCase):
-            @unittest.expectedFailure
-            def test_die(self):
-                with self.subTest():
-                    # This one succeeds
-                    pass
-                with self.subTest():
-                    self.fail("help me!")
-                with self.subTest():
-                    # This one doesn't get executed
-                    self.fail("shouldn't come here")
-        events = []
-        result = LoggingResult(events)
-        test = Foo("test_die")
-        test.run(result)
-        self.assertEqual(events,
-                         ['startTest', 'addSubTestSuccess',
-                          'addExpectedFailure', 'stopTest'])
-        self.assertEqual(len(result.expectedFailures), 1)
-        self.assertIs(result.expectedFailures[0][0], test)
-        self.assertTrue(result.wasSuccessful())
 
     def test_unexpected_success(self):
         class Foo(unittest.TestCase):
@@ -193,30 +145,8 @@
         self.assertEqual(result.unexpectedSuccesses, [test])
         self.assertFalse(result.wasSuccessful())
 
-    def test_unexpected_success_subtests(self):
-        # Success in all subtests counts as the unexpected success of
-        # the whole test.
-        class Foo(unittest.TestCase):
-            @unittest.expectedFailure
-            def test_die(self):
-                with self.subTest():
-                    # This one succeeds
-                    pass
-                with self.subTest():
-                    # So does this one
-                    pass
-        events = []
-        result = LoggingResult(events)
-        test = Foo("test_die")
-        test.run(result)
-        self.assertEqual(events,
-                         ['startTest',
-                          'addSubTestSuccess', 'addSubTestSuccess',
-                          'addUnexpectedSuccess', 'stopTest'])
-        self.assertFalse(result.failures)
-        self.assertEqual(result.unexpectedSuccesses, [test])
-        self.assertFalse(result.wasSuccessful())
 
+    @unittest.skip("CircuitPython issue 1179")                                  ###
     def test_skip_doesnt_run_setup(self):
         class Foo(unittest.TestCase):
             wasSetUp = False
@@ -258,3 +188,4 @@
 
 if __name__ == "__main__":
     unittest.main()
+