--- <CPython-3.4.9>/unittest/test/test_discovery.py
+++ lib/unittest/test/test_discovery.py
@@ -2,7 +2,6 @@
 import re
 import sys
 import types
-import pickle
 import builtins
 from test import support
 
@@ -217,9 +216,6 @@
         with self.assertRaises(ImportError):
             test.test_this_does_not_exist()
 
-        # Check picklability
-        for proto in range(pickle.HIGHEST_PROTOCOL + 1):
-            pickle.loads(pickle.dumps(test, proto))
 
     def test_discover_with_module_that_raises_SkipTest_on_import(self):
         loader = unittest.TestLoader()
@@ -237,146 +233,7 @@
         suite.run(result)
         self.assertEqual(len(result.skipped), 1)
 
-        # Check picklability
-        for proto in range(pickle.HIGHEST_PROTOCOL + 1):
-            pickle.loads(pickle.dumps(suite, proto))
-
-    def test_command_line_handling_parseArgs(self):
-        program = TestableTestProgram()
-
-        args = []
-        program._do_discovery = args.append
-        program.parseArgs(['something', 'discover'])
-        self.assertEqual(args, [[]])
-
-        args[:] = []
-        program.parseArgs(['something', 'discover', 'foo', 'bar'])
-        self.assertEqual(args, [['foo', 'bar']])
-
-    def test_command_line_handling_discover_by_default(self):
-        program = TestableTestProgram()
-
-        args = []
-        program._do_discovery = args.append
-        program.parseArgs(['something'])
-        self.assertEqual(args, [[]])
-        self.assertEqual(program.verbosity, 1)
-        self.assertIs(program.buffer, False)
-        self.assertIs(program.catchbreak, False)
-        self.assertIs(program.failfast, False)
-
-    def test_command_line_handling_discover_by_default_with_options(self):
-        program = TestableTestProgram()
-
-        args = []
-        program._do_discovery = args.append
-        program.parseArgs(['something', '-v', '-b', '-v', '-c', '-f'])
-        self.assertEqual(args, [[]])
-        self.assertEqual(program.verbosity, 2)
-        self.assertIs(program.buffer, True)
-        self.assertIs(program.catchbreak, True)
-        self.assertIs(program.failfast, True)
-
-
-    def test_command_line_handling_do_discovery_too_many_arguments(self):
-        program = TestableTestProgram()
-        program.testLoader = None
-
-        with support.captured_stderr() as stderr, \
-             self.assertRaises(SystemExit) as cm:
-            # too many args
-            program._do_discovery(['one', 'two', 'three', 'four'])
-        self.assertEqual(cm.exception.args, (2,))
-        self.assertIn('usage:', stderr.getvalue())
-
-
-    def test_command_line_handling_do_discovery_uses_default_loader(self):
-        program = object.__new__(unittest.TestProgram)
-        program._initArgParsers()
-
-        class Loader(object):
-            args = []
-            def discover(self, start_dir, pattern, top_level_dir):
-                self.args.append((start_dir, pattern, top_level_dir))
-                return 'tests'
-
-        program.testLoader = Loader()
-        program._do_discovery(['-v'])
-        self.assertEqual(Loader.args, [('.', 'test*.py', None)])
-
-    def test_command_line_handling_do_discovery_calls_loader(self):
-        program = TestableTestProgram()
-
-        class Loader(object):
-            args = []
-            def discover(self, start_dir, pattern, top_level_dir):
-                self.args.append((start_dir, pattern, top_level_dir))
-                return 'tests'
-
-        program._do_discovery(['-v'], Loader=Loader)
-        self.assertEqual(program.verbosity, 2)
-        self.assertEqual(program.test, 'tests')
-        self.assertEqual(Loader.args, [('.', 'test*.py', None)])
-
-        Loader.args = []
-        program = TestableTestProgram()
-        program._do_discovery(['--verbose'], Loader=Loader)
-        self.assertEqual(program.test, 'tests')
-        self.assertEqual(Loader.args, [('.', 'test*.py', None)])
-
-        Loader.args = []
-        program = TestableTestProgram()
-        program._do_discovery([], Loader=Loader)
-        self.assertEqual(program.test, 'tests')
-        self.assertEqual(Loader.args, [('.', 'test*.py', None)])
-
-        Loader.args = []
-        program = TestableTestProgram()
-        program._do_discovery(['fish'], Loader=Loader)
-        self.assertEqual(program.test, 'tests')
-        self.assertEqual(Loader.args, [('fish', 'test*.py', None)])
-
-        Loader.args = []
-        program = TestableTestProgram()
-        program._do_discovery(['fish', 'eggs'], Loader=Loader)
-        self.assertEqual(program.test, 'tests')
-        self.assertEqual(Loader.args, [('fish', 'eggs', None)])
-
-        Loader.args = []
-        program = TestableTestProgram()
-        program._do_discovery(['fish', 'eggs', 'ham'], Loader=Loader)
-        self.assertEqual(program.test, 'tests')
-        self.assertEqual(Loader.args, [('fish', 'eggs', 'ham')])
-
-        Loader.args = []
-        program = TestableTestProgram()
-        program._do_discovery(['-s', 'fish'], Loader=Loader)
-        self.assertEqual(program.test, 'tests')
-        self.assertEqual(Loader.args, [('fish', 'test*.py', None)])
-
-        Loader.args = []
-        program = TestableTestProgram()
-        program._do_discovery(['-t', 'fish'], Loader=Loader)
-        self.assertEqual(program.test, 'tests')
-        self.assertEqual(Loader.args, [('.', 'test*.py', 'fish')])
-
-        Loader.args = []
-        program = TestableTestProgram()
-        program._do_discovery(['-p', 'fish'], Loader=Loader)
-        self.assertEqual(program.test, 'tests')
-        self.assertEqual(Loader.args, [('.', 'fish', None)])
-        self.assertFalse(program.failfast)
-        self.assertFalse(program.catchbreak)
-
-        Loader.args = []
-        program = TestableTestProgram()
-        program._do_discovery(['-p', 'eggs', '-s', 'fish', '-v', '-f', '-c'],
-                              Loader=Loader)
-        self.assertEqual(program.test, 'tests')
-        self.assertEqual(Loader.args, [('fish', 'eggs', None)])
-        self.assertEqual(program.verbosity, 2)
-        self.assertTrue(program.failfast)
-        self.assertTrue(program.catchbreak)
+
 
     def setup_module_clash(self):
         class Module(object):
@@ -458,79 +315,8 @@
         self.assertEqual(suite._tests, tests)
 
 
-    def test_discovery_from_dotted_path_builtin_modules(self):
-
-        loader = unittest.TestLoader()
-
-        listdir = os.listdir
-        os.listdir = lambda _: ['test_this_does_not_exist.py']
-        isfile = os.path.isfile
-        isdir = os.path.isdir
-        os.path.isdir = lambda _: False
-        orig_sys_path = sys.path[:]
-        def restore():
-            os.path.isfile = isfile
-            os.path.isdir = isdir
-            os.listdir = listdir
-            sys.path[:] = orig_sys_path
-        self.addCleanup(restore)
-
-        with self.assertRaises(TypeError) as cm:
-            loader.discover('sys')
-        self.assertEqual(str(cm.exception),
-                         'Can not use builtin modules '
-                         'as dotted module names')
-
-    def test_discovery_from_dotted_namespace_packages(self):
-        loader = unittest.TestLoader()
-
-        orig_import = __import__
-        package = types.ModuleType('package')
-        package.__path__ = ['/a', '/b']
-        package.__spec__ = types.SimpleNamespace(
-           loader=None,
-           submodule_search_locations=['/a', '/b']
-        )
-
-        def _import(packagename, *args, **kwargs):
-            sys.modules[packagename] = package
-            return package
-
-        def cleanup():
-            builtins.__import__ = orig_import
-        self.addCleanup(cleanup)
-        builtins.__import__ = _import
-
-        _find_tests_args = []
-        def _find_tests(start_dir, pattern, namespace=None):
-            _find_tests_args.append((start_dir, pattern))
-            return ['%s/tests' % start_dir]
-
-        loader._find_tests = _find_tests
-        loader.suiteClass = list
-        suite = loader.discover('package')
-        self.assertEqual(suite, ['/a/tests', '/b/tests'])
-
-    def test_discovery_failed_discovery(self):
-        loader = unittest.TestLoader()
-        package = types.ModuleType('package')
-        orig_import = __import__
-
-        def _import(packagename, *args, **kwargs):
-            sys.modules[packagename] = package
-            return package
-
-        def cleanup():
-            builtins.__import__ = orig_import
-        self.addCleanup(cleanup)
-        builtins.__import__ = _import
-
-        with self.assertRaises(TypeError) as cm:
-            loader.discover('package')
-        self.assertEqual(str(cm.exception),
-                         'don\'t know how to discover from {!r}'
-                         .format(package))
 
 
 if __name__ == '__main__':
     unittest.main()
+