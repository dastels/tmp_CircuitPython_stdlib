--- <CPython-3.4.9>/unittest/test/test_suite.py
+++ lib/unittest/test/test_suite.py
@@ -1,8 +1,6 @@
 import unittest
 
-import gc
 import sys
-import weakref
 from unittest.test.support import LoggingResult, TestEquality
 
 
@@ -323,14 +321,6 @@
         suite = unittest.TestSuite()
         self.assertRaises(TypeError, suite.addTests, "foo")
 
-    def test_function_in_suite(self):
-        def f(_):
-            pass
-        suite = unittest.TestSuite()
-        suite.addTest(f)
-
-        # when the bug is fixed this line will not crash
-        suite.run(unittest.TestResult())
 
     def test_remove_test_at_index(self):
         if not unittest.BaseTestSuite._cleanup:
@@ -353,33 +343,6 @@
         # if _removeAtIndex raises for noniterables this next line will break
         suite._removeTestAtIndex(2)
 
-    def assert_garbage_collect_test_after_run(self, TestSuiteClass):
-        if not unittest.BaseTestSuite._cleanup:
-            raise unittest.SkipTest("Suite cleanup is disabled")
-
-        class Foo(unittest.TestCase):
-            def test_nothing(self):
-                pass
-
-        test = Foo('test_nothing')
-        wref = weakref.ref(test)
-
-        suite = TestSuiteClass([wref()])
-        suite.run(unittest.TestResult())
-
-        del test
-
-        # for the benefit of non-reference counting implementations
-        gc.collect()
-
-        self.assertEqual(suite._tests, [None])
-        self.assertIsNone(wref())
-
-    def test_garbage_collect_test_after_run_BaseTestSuite(self):
-        self.assert_garbage_collect_test_after_run(unittest.BaseTestSuite)
-
-    def test_garbage_collect_test_after_run_TestSuite(self):
-        self.assert_garbage_collect_test_after_run(unittest.TestSuite)
 
     def test_basetestsuite(self):
         class Test(unittest.TestCase):
@@ -445,3 +408,4 @@
 
 if __name__ == '__main__':
     unittest.main()
+