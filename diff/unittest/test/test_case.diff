--- <CPython-3.4.9>/unittest/test/test_case.py
+++ lib/unittest/test/test_case.py
@@ -1,15 +1,8 @@
 import contextlib
 import difflib
-import pprint
-import pickle
 import re
 import sys
-import logging
-import warnings
-import weakref
-import inspect
-
-from copy import deepcopy
+
 from test import support
 
 import unittest
@@ -18,12 +11,8 @@
     TestEquality, TestHashing, LoggingResult, LegacyLoggingResult,
     ResultWithNoStartTestRunStopTestRun
 )
-from test.support import captured_stderr
-
-
-log_foo = logging.getLogger('foo')
-log_foobar = logging.getLogger('foo.bar')
-log_quux = logging.getLogger('quux')
+
+
 
 
 class Test(object):
@@ -338,15 +327,6 @@
                     'addSubTestSuccess', 'addError', 'stopTest']
         self._check_call_order__subtests(result, events, expected)
 
-    def test_run_call_order__subtests_legacy(self):
-        # With a legacy result object (without a addSubTest method),
-        # text execution stops after the first subtest failure.
-        events = []
-        result = LegacyLoggingResult(events)
-        expected = ['startTest', 'setUp', 'test', 'tearDown',
-                    'addFailure', 'stopTest']
-        self._check_call_order__subtests(result, events, expected)
-
     def _check_call_order__subtests_success(self, result, events, expected_events):
         class Foo(Test.LoggingTestCase):
             def test(self):
@@ -370,14 +350,6 @@
                     + ['addSuccess', 'stopTest'])
         self._check_call_order__subtests_success(result, events, expected)
 
-    def test_run_call_order__subtests_success_legacy(self):
-        # With a legacy result, only the whole test success is recorded.
-        events = []
-        result = LegacyLoggingResult(events)
-        expected = ['startTest', 'setUp', 'test', 'tearDown',
-                    'addSuccess', 'stopTest']
-        self._check_call_order__subtests_success(result, events, expected)
-
     def test_run_call_order__subtests_failfast(self):
         events = []
         result = LoggingResult(events)
@@ -574,27 +546,6 @@
     def testShortDescriptionWithoutDocstring(self):
         self.assertIsNone(self.shortDescription())
 
-    @unittest.skipIf(sys.flags.optimize >= 2,
-                     "Docstrings are omitted with -O2 and above")
-    def testShortDescriptionWithOneLineDocstring(self):
-        """Tests shortDescription() for a method with a docstring."""
-        self.assertEqual(
-                self.shortDescription(),
-                'Tests shortDescription() for a method with a docstring.')
-
-    @unittest.skipIf(sys.flags.optimize >= 2,
-                     "Docstrings are omitted with -O2 and above")
-    def testShortDescriptionWithMultiLineDocstring(self):
-        """Tests shortDescription() for a method with a longer docstring.
-
-        This method ensures that only the first line of a docstring is
-        returned used in the short description, no matter how long the
-        whole thing is.
-        """
-        self.assertEqual(
-                self.shortDescription(),
-                 'Tests shortDescription() for a method with a longer '
-                 'docstring.')
 
     def testAddTypeEqualityFunc(self):
         class SadSnake(object):
@@ -652,35 +603,7 @@
         self.assertRaises(self.failureException, self.assertNotIn, 'cow',
                           animals)
 
-    def testAssertDictContainsSubset(self):
-        with warnings.catch_warnings():
-            warnings.simplefilter("ignore", DeprecationWarning)
-
-            self.assertDictContainsSubset({}, {})
-            self.assertDictContainsSubset({}, {'a': 1})
-            self.assertDictContainsSubset({'a': 1}, {'a': 1})
-            self.assertDictContainsSubset({'a': 1}, {'a': 1, 'b': 2})
-            self.assertDictContainsSubset({'a': 1, 'b': 2}, {'a': 1, 'b': 2})
-
-            with self.assertRaises(self.failureException):
-                self.assertDictContainsSubset({1: "one"}, {})
-
-            with self.assertRaises(self.failureException):
-                self.assertDictContainsSubset({'a': 2}, {'a': 1})
-
-            with self.assertRaises(self.failureException):
-                self.assertDictContainsSubset({'c': 1}, {'a': 1})
-
-            with self.assertRaises(self.failureException):
-                self.assertDictContainsSubset({'a': 1, 'c': 1}, {'a': 1})
-
-            with self.assertRaises(self.failureException):
-                self.assertDictContainsSubset({'a': 1, 'c': 1}, {'a': 1})
-
-            one = ''.join(chr(i) for i in range(255))
-            # this used to cause a UnicodeDecodeError constructing the failure msg
-            with self.assertRaises(self.failureException):
-                self.assertDictContainsSubset({'foo': one}, {'foo': '\uFFFD'})
+    # Drop test of deprecated functions                                         ###
 
     def testAssertEqual(self):
         equal_pairs = [
@@ -753,63 +676,7 @@
         self.assertRaises(self.failureException, self.assertSequenceEqual,
                           1, 1)
 
-        self.assertDictEqual({}, {})
-
-        c = { 'x': 1 }
-        d = {}
-        self.assertRaises(unittest.TestCase.failureException,
-                          self.assertDictEqual, c, d)
-
-        d.update(c)
-        self.assertDictEqual(c, d)
-
-        d['x'] = 0
-        self.assertRaises(unittest.TestCase.failureException,
-                          self.assertDictEqual, c, d, 'These are unequal')
-
-        self.assertRaises(self.failureException, self.assertDictEqual, None, d)
-        self.assertRaises(self.failureException, self.assertDictEqual, [], d)
-        self.assertRaises(self.failureException, self.assertDictEqual, 1, 1)
-
-    def testAssertSequenceEqualMaxDiff(self):
-        self.assertEqual(self.maxDiff, 80*8)
-        seq1 = 'a' + 'x' * 80**2
-        seq2 = 'b' + 'x' * 80**2
-        diff = '\n'.join(difflib.ndiff(pprint.pformat(seq1).splitlines(),
-                                       pprint.pformat(seq2).splitlines()))
-        # the +1 is the leading \n added by assertSequenceEqual
-        omitted = unittest.case.DIFF_OMITTED % (len(diff) + 1,)
-
-        self.maxDiff = len(diff)//2
-        try:
-
-            self.assertSequenceEqual(seq1, seq2)
-        except self.failureException as e:
-            msg = e.args[0]
-        else:
-            self.fail('assertSequenceEqual did not fail.')
-        self.assertLess(len(msg), len(diff))
-        self.assertIn(omitted, msg)
-
-        self.maxDiff = len(diff) * 2
-        try:
-            self.assertSequenceEqual(seq1, seq2)
-        except self.failureException as e:
-            msg = e.args[0]
-        else:
-            self.fail('assertSequenceEqual did not fail.')
-        self.assertGreater(len(msg), len(diff))
-        self.assertNotIn(omitted, msg)
-
-        self.maxDiff = None
-        try:
-            self.assertSequenceEqual(seq1, seq2)
-        except self.failureException as e:
-            msg = e.args[0]
-        else:
-            self.fail('assertSequenceEqual did not fail.')
-        self.assertGreater(len(msg), len(diff))
-        self.assertNotIn(omitted, msg)
+
 
     def testTruncateMessage(self):
         self.maxDiff = 1
@@ -825,17 +692,6 @@
         message = self._truncateMessage('foo', 'bar')
         self.assertEqual(message, 'foobar')
 
-    def testAssertDictEqualTruncates(self):
-        test = unittest.TestCase('assertEqual')
-        def truncate(msg, diff):
-            return 'foo'
-        test._truncateMessage = truncate
-        try:
-            test.assertDictEqual({}, {1: 0})
-        except self.failureException as e:
-            self.assertEqual(str(e), 'foo')
-        else:
-            self.fail('assertDictEqual did not fail')
 
     def testAssertMultiLineEqualTruncates(self):
         test = unittest.TestCase('assertEqual')
@@ -914,67 +770,7 @@
         d = 'y' * 40 + '[56 chars]yyyy'
         self.assertEqual(str(cm.exception), "'%sa%s' != '%sb%s'" % (c, d, c, d))
 
-    def testAssertCountEqual(self):
-        a = object()
-        self.assertCountEqual([1, 2, 3], [3, 2, 1])
-        self.assertCountEqual(['foo', 'bar', 'baz'], ['bar', 'baz', 'foo'])
-        self.assertCountEqual([a, a, 2, 2, 3], (a, 2, 3, a, 2))
-        self.assertCountEqual([1, "2", "a", "a"], ["a", "2", True, "a"])
-        self.assertRaises(self.failureException, self.assertCountEqual,
-                          [1, 2] + [3] * 100, [1] * 100 + [2, 3])
-        self.assertRaises(self.failureException, self.assertCountEqual,
-                          [1, "2", "a", "a"], ["a", "2", True, 1])
-        self.assertRaises(self.failureException, self.assertCountEqual,
-                          [10], [10, 11])
-        self.assertRaises(self.failureException, self.assertCountEqual,
-                          [10, 11], [10])
-        self.assertRaises(self.failureException, self.assertCountEqual,
-                          [10, 11, 10], [10, 11])
-
-        # Test that sequences of unhashable objects can be tested for sameness:
-        self.assertCountEqual([[1, 2], [3, 4], 0], [False, [3, 4], [1, 2]])
-        # Test that iterator of unhashable objects can be tested for sameness:
-        self.assertCountEqual(iter([1, 2, [], 3, 4]),
-                              iter([1, 2, [], 3, 4]))
-
-        # hashable types, but not orderable
-        self.assertRaises(self.failureException, self.assertCountEqual,
-                          [], [divmod, 'x', 1, 5j, 2j, frozenset()])
-        # comparing dicts
-        self.assertCountEqual([{'a': 1}, {'b': 2}], [{'b': 2}, {'a': 1}])
-        # comparing heterogenous non-hashable sequences
-        self.assertCountEqual([1, 'x', divmod, []], [divmod, [], 'x', 1])
-        self.assertRaises(self.failureException, self.assertCountEqual,
-                          [], [divmod, [], 'x', 1, 5j, 2j, set()])
-        self.assertRaises(self.failureException, self.assertCountEqual,
-                          [[1]], [[2]])
-
-        # Same elements, but not same sequence length
-        self.assertRaises(self.failureException, self.assertCountEqual,
-                          [1, 1, 2], [2, 1])
-        self.assertRaises(self.failureException, self.assertCountEqual,
-                          [1, 1, "2", "a", "a"], ["2", "2", True, "a"])
-        self.assertRaises(self.failureException, self.assertCountEqual,
-                          [1, {'b': 2}, None, True], [{'b': 2}, True, None])
-
-        # Same elements which don't reliably compare, in
-        # different order, see issue 10242
-        a = [{2,4}, {1,2}]
-        b = a[::-1]
-        self.assertCountEqual(a, b)
-
-        # test utility functions supporting assertCountEqual()
-
-        diffs = set(unittest.util._count_diff_all_purpose('aaabccd', 'abbbcce'))
-        expected = {(3,1,'a'), (1,3,'b'), (1,0,'d'), (0,1,'e')}
-        self.assertEqual(diffs, expected)
-
-        diffs = unittest.util._count_diff_all_purpose([[]], [])
-        self.assertEqual(diffs, [(1, 0, [])])
-
-        diffs = set(unittest.util._count_diff_hashable('aaabccd', 'abbbcce'))
-        expected = {(3,1,'a'), (1,3,'b'), (1,0,'d'), (0,1,'e')}
-        self.assertEqual(diffs, expected)
+    # assertCountEqual is not implemented yet                                   ###
 
     def testAssertSetEqual(self):
         set1 = set()
@@ -1142,8 +938,6 @@
         self.assertRaises(ExceptionMock, Stub)
         # A tuple of exception classes is accepted
         self.assertRaises((ValueError, ExceptionMock), Stub)
-        # *args and **kwargs also work
-        self.assertRaises(ValueError, int, '19', base=8)
         # Failure when no exception is raised
         with self.assertRaises(self.failureException):
             self.assertRaises(ExceptionMock, lambda: 0)
@@ -1164,9 +958,6 @@
         # The context manager exposes caught exception
         self.assertIsInstance(cm.exception, ExceptionMock)
         self.assertEqual(cm.exception.args[0], 'We expect')
-        # *args and **kwargs also work
-        with self.assertRaises(ValueError):
-            int('19', base=8)
         # Failure when no exception is raised
         with self.assertRaises(self.failureException):
             with self.assertRaises(ExceptionMock):
@@ -1201,12 +992,6 @@
             pass
         self.assertRaises(TypeError, self.assertRaisesRegex, MyExc, lambda: True)
 
-    def testAssertWarnsRegexInvalidRegex(self):
-        # Issue 20145.
-        class MyWarn(Warning):
-            pass
-        self.assertRaises(TypeError, self.assertWarnsRegex, MyWarn, lambda: True)
-
     def testAssertRaisesRegexMismatch(self):
         def Stub():
             raise Exception('Unexpected')
@@ -1216,11 +1001,6 @@
                 r'"\^Expected\$" does not match "Unexpected"',
                 self.assertRaisesRegex, Exception, '^Expected$',
                 Stub)
-        self.assertRaisesRegex(
-                self.failureException,
-                r'"\^Expected\$" does not match "Unexpected"',
-                self.assertRaisesRegex, Exception,
-                re.compile('^Expected$'), Stub)
 
     def testAssertRaisesExcValue(self):
         class ExceptionMock(Exception):
@@ -1237,293 +1017,6 @@
         self.assertIsInstance(e, ExceptionMock)
         self.assertEqual(e.args[0], v)
 
-    def testAssertWarnsCallable(self):
-        def _runtime_warn():
-            warnings.warn("foo", RuntimeWarning)
-        # Success when the right warning is triggered, even several times
-        self.assertWarns(RuntimeWarning, _runtime_warn)
-        self.assertWarns(RuntimeWarning, _runtime_warn)
-        # A tuple of warning classes is accepted
-        self.assertWarns((DeprecationWarning, RuntimeWarning), _runtime_warn)
-        # *args and **kwargs also work
-        self.assertWarns(RuntimeWarning,
-                         warnings.warn, "foo", category=RuntimeWarning)
-        # Failure when no warning is triggered
-        with self.assertRaises(self.failureException):
-            self.assertWarns(RuntimeWarning, lambda: 0)
-        # Failure when another warning is triggered
-        with warnings.catch_warnings():
-            # Force default filter (in case tests are run with -We)
-            warnings.simplefilter("default", RuntimeWarning)
-            with self.assertRaises(self.failureException):
-                self.assertWarns(DeprecationWarning, _runtime_warn)
-        # Filters for other warnings are not modified
-        with warnings.catch_warnings():
-            warnings.simplefilter("error", RuntimeWarning)
-            with self.assertRaises(RuntimeWarning):
-                self.assertWarns(DeprecationWarning, _runtime_warn)
-
-    def testAssertWarnsContext(self):
-        # Believe it or not, it is preferable to duplicate all tests above,
-        # to make sure the __warningregistry__ $@ is circumvented correctly.
-        def _runtime_warn():
-            warnings.warn("foo", RuntimeWarning)
-        _runtime_warn_lineno = inspect.getsourcelines(_runtime_warn)[1]
-        with self.assertWarns(RuntimeWarning) as cm:
-            _runtime_warn()
-        # A tuple of warning classes is accepted
-        with self.assertWarns((DeprecationWarning, RuntimeWarning)) as cm:
-            _runtime_warn()
-        # The context manager exposes various useful attributes
-        self.assertIsInstance(cm.warning, RuntimeWarning)
-        self.assertEqual(cm.warning.args[0], "foo")
-        self.assertIn("test_case.py", cm.filename)
-        self.assertEqual(cm.lineno, _runtime_warn_lineno + 1)
-        # Same with several warnings
-        with self.assertWarns(RuntimeWarning):
-            _runtime_warn()
-            _runtime_warn()
-        with self.assertWarns(RuntimeWarning):
-            warnings.warn("foo", category=RuntimeWarning)
-        # Failure when no warning is triggered
-        with self.assertRaises(self.failureException):
-            with self.assertWarns(RuntimeWarning):
-                pass
-        # Failure when another warning is triggered
-        with warnings.catch_warnings():
-            # Force default filter (in case tests are run with -We)
-            warnings.simplefilter("default", RuntimeWarning)
-            with self.assertRaises(self.failureException):
-                with self.assertWarns(DeprecationWarning):
-                    _runtime_warn()
-        # Filters for other warnings are not modified
-        with warnings.catch_warnings():
-            warnings.simplefilter("error", RuntimeWarning)
-            with self.assertRaises(RuntimeWarning):
-                with self.assertWarns(DeprecationWarning):
-                    _runtime_warn()
-
-    def testAssertWarnsRegexCallable(self):
-        def _runtime_warn(msg):
-            warnings.warn(msg, RuntimeWarning)
-        self.assertWarnsRegex(RuntimeWarning, "o+",
-                              _runtime_warn, "foox")
-        # Failure when no warning is triggered
-        with self.assertRaises(self.failureException):
-            self.assertWarnsRegex(RuntimeWarning, "o+",
-                                  lambda: 0)
-        # Failure when another warning is triggered
-        with warnings.catch_warnings():
-            # Force default filter (in case tests are run with -We)
-            warnings.simplefilter("default", RuntimeWarning)
-            with self.assertRaises(self.failureException):
-                self.assertWarnsRegex(DeprecationWarning, "o+",
-                                      _runtime_warn, "foox")
-        # Failure when message doesn't match
-        with self.assertRaises(self.failureException):
-            self.assertWarnsRegex(RuntimeWarning, "o+",
-                                  _runtime_warn, "barz")
-        # A little trickier: we ask RuntimeWarnings to be raised, and then
-        # check for some of them.  It is implementation-defined whether
-        # non-matching RuntimeWarnings are simply re-raised, or produce a
-        # failureException.
-        with warnings.catch_warnings():
-            warnings.simplefilter("error", RuntimeWarning)
-            with self.assertRaises((RuntimeWarning, self.failureException)):
-                self.assertWarnsRegex(RuntimeWarning, "o+",
-                                      _runtime_warn, "barz")
-
-    def testAssertWarnsRegexContext(self):
-        # Same as above, but with assertWarnsRegex as a context manager
-        def _runtime_warn(msg):
-            warnings.warn(msg, RuntimeWarning)
-        _runtime_warn_lineno = inspect.getsourcelines(_runtime_warn)[1]
-        with self.assertWarnsRegex(RuntimeWarning, "o+") as cm:
-            _runtime_warn("foox")
-        self.assertIsInstance(cm.warning, RuntimeWarning)
-        self.assertEqual(cm.warning.args[0], "foox")
-        self.assertIn("test_case.py", cm.filename)
-        self.assertEqual(cm.lineno, _runtime_warn_lineno + 1)
-        # Failure when no warning is triggered
-        with self.assertRaises(self.failureException):
-            with self.assertWarnsRegex(RuntimeWarning, "o+"):
-                pass
-        # Failure when another warning is triggered
-        with warnings.catch_warnings():
-            # Force default filter (in case tests are run with -We)
-            warnings.simplefilter("default", RuntimeWarning)
-            with self.assertRaises(self.failureException):
-                with self.assertWarnsRegex(DeprecationWarning, "o+"):
-                    _runtime_warn("foox")
-        # Failure when message doesn't match
-        with self.assertRaises(self.failureException):
-            with self.assertWarnsRegex(RuntimeWarning, "o+"):
-                _runtime_warn("barz")
-        # A little trickier: we ask RuntimeWarnings to be raised, and then
-        # check for some of them.  It is implementation-defined whether
-        # non-matching RuntimeWarnings are simply re-raised, or produce a
-        # failureException.
-        with warnings.catch_warnings():
-            warnings.simplefilter("error", RuntimeWarning)
-            with self.assertRaises((RuntimeWarning, self.failureException)):
-                with self.assertWarnsRegex(RuntimeWarning, "o+"):
-                    _runtime_warn("barz")
-
-    @contextlib.contextmanager
-    def assertNoStderr(self):
-        with captured_stderr() as buf:
-            yield
-        self.assertEqual(buf.getvalue(), "")
-
-    def assertLogRecords(self, records, matches):
-        self.assertEqual(len(records), len(matches))
-        for rec, match in zip(records, matches):
-            self.assertIsInstance(rec, logging.LogRecord)
-            for k, v in match.items():
-                self.assertEqual(getattr(rec, k), v)
-
-    def testAssertLogsDefaults(self):
-        # defaults: root logger, level INFO
-        with self.assertNoStderr():
-            with self.assertLogs() as cm:
-                log_foo.info("1")
-                log_foobar.debug("2")
-            self.assertEqual(cm.output, ["INFO:foo:1"])
-            self.assertLogRecords(cm.records, [{'name': 'foo'}])
-
-    def testAssertLogsTwoMatchingMessages(self):
-        # Same, but with two matching log messages
-        with self.assertNoStderr():
-            with self.assertLogs() as cm:
-                log_foo.info("1")
-                log_foobar.debug("2")
-                log_quux.warning("3")
-            self.assertEqual(cm.output, ["INFO:foo:1", "WARNING:quux:3"])
-            self.assertLogRecords(cm.records,
-                                   [{'name': 'foo'}, {'name': 'quux'}])
-
-    def checkAssertLogsPerLevel(self, level):
-        # Check level filtering
-        with self.assertNoStderr():
-            with self.assertLogs(level=level) as cm:
-                log_foo.warning("1")
-                log_foobar.error("2")
-                log_quux.critical("3")
-            self.assertEqual(cm.output, ["ERROR:foo.bar:2", "CRITICAL:quux:3"])
-            self.assertLogRecords(cm.records,
-                                   [{'name': 'foo.bar'}, {'name': 'quux'}])
-
-    def testAssertLogsPerLevel(self):
-        self.checkAssertLogsPerLevel(logging.ERROR)
-        self.checkAssertLogsPerLevel('ERROR')
-
-    def checkAssertLogsPerLogger(self, logger):
-        # Check per-logger filtering
-        with self.assertNoStderr():
-            with self.assertLogs(level='DEBUG') as outer_cm:
-                with self.assertLogs(logger, level='DEBUG') as cm:
-                    log_foo.info("1")
-                    log_foobar.debug("2")
-                    log_quux.warning("3")
-                self.assertEqual(cm.output, ["INFO:foo:1", "DEBUG:foo.bar:2"])
-                self.assertLogRecords(cm.records,
-                                       [{'name': 'foo'}, {'name': 'foo.bar'}])
-            # The outer catchall caught the quux log
-            self.assertEqual(outer_cm.output, ["WARNING:quux:3"])
-
-    def testAssertLogsPerLogger(self):
-        self.checkAssertLogsPerLogger(logging.getLogger('foo'))
-        self.checkAssertLogsPerLogger('foo')
-
-    def testAssertLogsFailureNoLogs(self):
-        # Failure due to no logs
-        with self.assertNoStderr():
-            with self.assertRaises(self.failureException):
-                with self.assertLogs():
-                    pass
-
-    def testAssertLogsFailureLevelTooHigh(self):
-        # Failure due to level too high
-        with self.assertNoStderr():
-            with self.assertRaises(self.failureException):
-                with self.assertLogs(level='WARNING'):
-                    log_foo.info("1")
-
-    def testAssertLogsFailureMismatchingLogger(self):
-        # Failure due to mismatching logger (and the logged message is
-        # passed through)
-        with self.assertLogs('quux', level='ERROR'):
-            with self.assertRaises(self.failureException):
-                with self.assertLogs('foo'):
-                    log_quux.error("1")
-
-    def testDeprecatedMethodNames(self):
-        """
-        Test that the deprecated methods raise a DeprecationWarning. See #9424.
-        """
-        old = (
-            (self.failIfEqual, (3, 5)),
-            (self.assertNotEquals, (3, 5)),
-            (self.failUnlessEqual, (3, 3)),
-            (self.assertEquals, (3, 3)),
-            (self.failUnlessAlmostEqual, (2.0, 2.0)),
-            (self.assertAlmostEquals, (2.0, 2.0)),
-            (self.failIfAlmostEqual, (3.0, 5.0)),
-            (self.assertNotAlmostEquals, (3.0, 5.0)),
-            (self.failUnless, (True,)),
-            (self.assert_, (True,)),
-            (self.failUnlessRaises, (TypeError, lambda _: 3.14 + 'spam')),
-            (self.failIf, (False,)),
-            (self.assertDictContainsSubset, (dict(a=1, b=2), dict(a=1, b=2, c=3))),
-            (self.assertRaisesRegexp, (KeyError, 'foo', lambda: {}['foo'])),
-            (self.assertRegexpMatches, ('bar', 'bar')),
-        )
-        for meth, args in old:
-            with self.assertWarns(DeprecationWarning):
-                meth(*args)
-
-    # disable this test for now. When the version where the fail* methods will
-    # be removed is decided, re-enable it and update the version
-    def _testDeprecatedFailMethods(self):
-        """Test that the deprecated fail* methods get removed in 3.x"""
-        if sys.version_info[:2] < (3, 3):
-            return
-        deprecated_names = [
-            'failIfEqual', 'failUnlessEqual', 'failUnlessAlmostEqual',
-            'failIfAlmostEqual', 'failUnless', 'failUnlessRaises', 'failIf',
-            'assertDictContainsSubset',
-        ]
-        for deprecated_name in deprecated_names:
-            with self.assertRaises(AttributeError):
-                getattr(self, deprecated_name)  # remove these in 3.x
-
-    def testDeepcopy(self):
-        # Issue: 5660
-        class TestableTest(unittest.TestCase):
-            def testNothing(self):
-                pass
-
-        test = TestableTest('testNothing')
-
-        # This shouldn't blow up
-        deepcopy(test)
-
-    def testPickle(self):
-        # Issue 10326
-
-        # Can't use TestCase classes defined in Test class as
-        # pickle does not work with inner classes
-        test = unittest.TestCase('run')
-        for protocol in range(pickle.HIGHEST_PROTOCOL + 1):
-
-            # blew up prior to fix
-            pickled_test = pickle.dumps(test, protocol=protocol)
-            unpickled_test = pickle.loads(pickled_test)
-            self.assertEqual(test, unpickled_test)
-
-            # exercise the TestCase instance in a way that will invoke
-            # the type equality lookup mechanism
-            unpickled_test.assertEqual(set(), set())
 
     def testKeyboardInterrupt(self):
         def _raise(self=None):
@@ -1604,40 +1097,4 @@
             self.assertEqual(len(result.errors), 1)
             self.assertEqual(result.testsRun, 1)
 
-    @support.cpython_only
-    def testNoCycles(self):
-        case = unittest.TestCase()
-        wr = weakref.ref(case)
-        with support.disable_gc():
-            del case
-            self.assertFalse(wr())
-
-    def test_no_exception_leak(self):
-        # Issue #19880: TestCase.run() should not keep a reference
-        # to the exception
-        class MyException(Exception):
-            ninstance = 0
-
-            def __init__(self):
-                MyException.ninstance += 1
-                Exception.__init__(self)
-
-            def __del__(self):
-                MyException.ninstance -= 1
-
-        class TestCase(unittest.TestCase):
-            def test1(self):
-                raise MyException()
-
-            @unittest.expectedFailure
-            def test2(self):
-                raise MyException()
-
-        for method_name in ('test1', 'test2'):
-            testcase = TestCase(method_name)
-            testcase.run()
-            self.assertEqual(MyException.ninstance, 0)
-
-
-if __name__ == "__main__":
-    unittest.main()
+