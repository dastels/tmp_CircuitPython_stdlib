--- <CPython-3.4.9>/mimetypes.py
+++ lib/mimetypes.py
@@ -26,16 +26,6 @@
 import os
 import sys
 import posixpath
-import urllib.parse
-try:
-    import winreg as _winreg
-except ImportError:
-    _winreg = None
-
-__all__ = [
-    "guess_type","guess_extension","guess_all_extensions",
-    "add_type","read_mime_types","init"
-]
 
 knownfiles = [
     "/etc/mime.types",
@@ -111,26 +101,17 @@
         Optional `strict' argument when False adds a bunch of commonly found,
         but non-standard types.
         """
-        scheme, url = urllib.parse.splittype(url)
+        def splittype(url):                                                     ###
+            import ure                                                          ###
+            _typeprog = ure.compile('^([^/:]+):')                               ###
+            match = _typeprog.match(url)                                        ###
+            if match:                                                           ###
+                scheme = match.group(1)                                         ###
+                return scheme.lower(), url[len(scheme) + 1:]                    ###
+            return None, url                                                    ###
+        scheme, url = splittype(url)                                            ###
         if scheme == 'data':
-            # syntax of data URLs:
-            # dataurl   := "data:" [ mediatype ] [ ";base64" ] "," data
-            # mediatype := [ type "/" subtype ] *( ";" parameter )
-            # data      := *urlchar
-            # parameter := attribute "=" value
-            # type/subtype defaults to "text/plain"
-            comma = url.find(',')
-            if comma < 0:
-                # bad data URL
-                return None, None
-            semi = url.find(';', 0, comma)
-            if semi >= 0:
-                type = url[:semi]
-            else:
-                type = url[:comma]
-            if '=' in type or '/' not in type:
-                type = 'text/plain'
-            return type, None           # never compressed, so encoding is None
+            raise NotImplementedError('missing urllib')                         ###
         base, ext = posixpath.splitext(url)
         while ext in self.suffix_map:
             base, ext = posixpath.splitext(base + self.suffix_map[ext])
@@ -225,46 +206,6 @@
             for suff in suffixes:
                 self.add_type(type, '.' + suff, strict)
 
-    def read_windows_registry(self, strict=True):
-        """
-        Load the MIME types database from Windows registry.
-
-        If strict is true, information will be added to
-        list of standard types, else to the list of non-standard
-        types.
-        """
-
-        # Windows only
-        if not _winreg:
-            return
-
-        def enum_types(mimedb):
-            i = 0
-            while True:
-                try:
-                    ctype = _winreg.EnumKey(mimedb, i)
-                except EnvironmentError:
-                    break
-                else:
-                    if '\0' not in ctype:
-                        yield ctype
-                i += 1
-
-        with _winreg.OpenKey(_winreg.HKEY_CLASSES_ROOT, '') as hkcr:
-            for subkeyname in enum_types(hkcr):
-                try:
-                    with _winreg.OpenKey(hkcr, subkeyname) as subkey:
-                        # Only check file extensions
-                        if not subkeyname.startswith("."):
-                            continue
-                        # raises EnvironmentError if no 'Content Type' value
-                        mimetype, datatype = _winreg.QueryValueEx(
-                            subkey, 'Content Type')
-                        if datatype != _winreg.REG_SZ:
-                            continue
-                        self.add_type(mimetype, subkeyname, strict)
-                except EnvironmentError:
-                    continue
 
 def guess_type(url, strict=True):
     """Guess the type of a file based on its URL.
@@ -345,8 +286,6 @@
     inited = True    # so that MimeTypes.__init__() doesn't call us again
     db = MimeTypes()
     if files is None:
-        if _winreg:
-            db.read_windows_registry()
         files = knownfiles
     for file in files:
         if os.path.isfile(file):
@@ -547,47 +486,4 @@
 _default_mime_types()
 
 
-if __name__ == '__main__':
-    import getopt
-
-    USAGE = """\
-Usage: mimetypes.py [options] type
-
-Options:
-    --help / -h       -- print this message and exit
-    --lenient / -l    -- additionally search of some common, but non-standard
-                         types.
-    --extension / -e  -- guess extension instead of type
-
-More than one type argument may be given.
-"""
-
-    def usage(code, msg=''):
-        print(USAGE)
-        if msg: print(msg)
-        sys.exit(code)
-
-    try:
-        opts, args = getopt.getopt(sys.argv[1:], 'hle',
-                                   ['help', 'lenient', 'extension'])
-    except getopt.error as msg:
-        usage(1, msg)
-
-    strict = 1
-    extension = 0
-    for opt, arg in opts:
-        if opt in ('-h', '--help'):
-            usage(0)
-        elif opt in ('-l', '--lenient'):
-            strict = 0
-        elif opt in ('-e', '--extension'):
-            extension = 1
-    for gtype in args:
-        if extension:
-            guess = guess_extension(gtype, strict)
-            if not guess: print("I don't know anything about type", gtype)
-            else: print(guess)
-        else:
-            guess, encoding = guess_type(gtype, strict)
-            if not guess: print("I don't know anything about type", gtype)
-            else: print('type:', guess, 'encoding:', encoding)
+