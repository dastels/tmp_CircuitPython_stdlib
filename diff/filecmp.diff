--- <CPython-3.4.9>/filecmp.py
+++ lib/filecmp.py
@@ -14,10 +14,9 @@
 import stat
 from itertools import filterfalse
 
-__all__ = ['clear_cache', 'cmp', 'dircmp', 'cmpfiles', 'DEFAULT_IGNORES']
 
 _cache = {}
-BUFSIZE = 8*1024
+BUFSIZE = 256                                                                   ###
 
 DEFAULT_IGNORES = [
     'RCS', 'CVS', 'tags', '.git', '.hg', '.bzr', '_darcs', '__pycache__']
@@ -140,9 +139,13 @@
     def phase1(self): # Compute common names
         a = dict(zip(map(os.path.normcase, self.left_list), self.left_list))
         b = dict(zip(map(os.path.normcase, self.right_list), self.right_list))
-        self.common = list(map(a.__getitem__, filter(b.__contains__, a)))
-        self.left_only = list(map(a.__getitem__, filterfalse(b.__contains__, a)))
-        self.right_only = list(map(b.__getitem__, filterfalse(a.__contains__, b)))
+        def b_contains(item):                                                   ### Builtin types doesn't have __contains__
+            return item in b                                                    ###
+        self.common = list(map(a.__getitem__, filter(b_contains, a)))           ###
+        self.left_only = list(map(a.__getitem__, filterfalse(b_contains, a)))   ###
+        def a_contains(item):                                                   ###
+            return item in a                                                    ###
+        self.right_only = list(map(b.__getitem__, filterfalse(a_contains, b)))  ###
 
     def phase2(self): # Distinguish files, directories, funnies
         self.common_dirs = []
@@ -284,22 +287,12 @@
 # Return a copy with items that occur in skip removed.
 #
 def _filter(flist, skip):
-    return list(filterfalse(skip.__contains__, flist))
-
-
-# Demonstration and testing.
-#
-def demo():
-    import sys
-    import getopt
-    options, args = getopt.getopt(sys.argv[1:], 'r')
-    if len(args) != 2:
-        raise getopt.GetoptError('need exactly two args', None)
-    dd = dircmp(args[0], args[1])
-    if ('-r', '') in options:
-        dd.report_full_closure()
-    else:
-        dd.report()
-
-if __name__ == '__main__':
-    demo()
+    try:                                                                        ###
+        return list(filterfalse(skip.__contains__, flist))                      ###
+    except AttributeError:                                                      ###
+        def contains(item):                                                     ###
+            return item in skip                                                 ###
+        return list(filterfalse(contains, flist))                               ###
+
+
+